const paymentService = require('../services/payment.service');
const sepayService = require('../services/sepay.service');

/**
 * Webhook t·ª´ Sepay khi c√≥ giao d·ªãch m·ªõi
 */
const handleSepayWebhook = async (req, res) => {
  try {
    console.log('üîî Nh·∫≠n webhook t·ª´ Sepay:', req.body);

    // Validate webhook signature (n·∫øu Sepay c√≥)
    const signature = req.headers['x-sepay-signature'];
    if (signature && !sepayService.validateWebhook(signature, req.body)) {
      return res.status(401).json({
        success: false,
        message: 'Invalid webhook signature'
      });
    }

    // Parse webhook data
    const webhookData = sepayService.parseWebhookData(req.body);
    
    // L·∫•y appointment ID t·ª´ content
    // Content format: "APPOINTMENT {shortId}"
    const content = webhookData.content;
    const match = content.match(/APPOINTMENT\s+([A-Z0-9]+)/i);
    
    if (!match) {
      console.log('‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y appointment ID trong content:', content);
      return res.status(200).json({ received: true });
    }

    const shortId = match[1];
    console.log('üîç Short ID:', shortId);

    // T√¨m appointment theo short ID (8 k√Ω t·ª± cu·ªëi)
    const Appointment = require('../models/appointment.model');
    const appointments = await Appointment.find({
      status: 'PendingPayment'
    }).populate('paymentId');

    const appointment = appointments.find(apt => {
      const aptShortId = apt._id.toString().slice(-8).toUpperCase();
      return aptShortId === shortId;
    });

    if (!appointment) {
      console.log('‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y appointment v·ªõi shortId:', shortId);
      return res.status(200).json({ received: true });
    }

    console.log('‚úÖ T√¨m th·∫•y appointment:', appointment._id);

    // Ki·ªÉm tra s·ªë ti·ªÅn
    if (webhookData.amount < appointment.paymentId.amount) {
      console.log('‚ö†Ô∏è  S·ªë ti·ªÅn kh√¥ng ƒë√∫ng:', webhookData.amount, 'vs', appointment.paymentId.amount);
      return res.status(200).json({ received: true });
    }

    // Confirm payment
    await paymentService.confirmPayment(appointment.paymentId._id, webhookData);

    console.log('‚úÖ Payment confirmed successfully');

    res.status(200).json({
      success: true,
      message: 'Payment confirmed',
      appointmentId: appointment._id
    });

  } catch (error) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω webhook:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói x·ª≠ l√Ω webhook'
    });
  }
};

/**
 * Manual check payment status (cho user check)
 */
const checkPaymentStatus = async (req, res) => {
  try {
    const { paymentId } = req.params;

    // Check v√† confirm payment n·∫øu ƒë√£ c√≥ giao d·ªãch
    const result = await paymentService.checkAndConfirmPayment(paymentId);

    if (result && result.appointment) {
      return res.status(200).json({
        success: true,
        message: 'Thanh to√°n th√†nh c√¥ng',
        data: {
          payment: result.payment,
          appointment: result.appointment,
          confirmed: true
        }
      });
    }

    // Ch∆∞a c√≥ giao d·ªãch
    const payment = await paymentService.getPaymentInfo(paymentId);
    
    res.status(200).json({
      success: true,
      message: 'Ch∆∞a nh·∫≠n ƒë∆∞·ª£c thanh to√°n',
      data: {
        payment,
        confirmed: false
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói check payment:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói ki·ªÉm tra thanh to√°n',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

/**
 * L·∫•y th√¥ng tin thanh to√°n
 */
const getPaymentInfo = async (req, res) => {
  try {
    const { paymentId } = req.params;

    const payment = await paymentService.getPaymentInfo(paymentId);

    res.status(200).json({
      success: true,
      data: { payment }
    });

  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y payment info:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói l·∫•y th√¥ng tin thanh to√°n',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

/**
 * Manual confirm payment (cho admin)
 */
const manualConfirmPayment = async (req, res) => {
  try {
    const { paymentId } = req.params;

    // Check if user is admin/staff
    if (!['Admin', 'Staff', 'Manager'].includes(req.user?.role)) {
      return res.status(403).json({
        success: false,
        message: 'Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y'
      });
    }

    const result = await paymentService.confirmPayment(paymentId, {
      manualConfirm: true,
      confirmedBy: req.user.userId
    });

    res.status(200).json({
      success: true,
      message: 'ƒê√£ x√°c nh·∫≠n thanh to√°n th·ªß c√¥ng',
      data: result
    });

  } catch (error) {
    console.error('‚ùå L·ªói confirm payment:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói x√°c nh·∫≠n thanh to√°n',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

module.exports = {
  handleSepayWebhook,
  checkPaymentStatus,
  getPaymentInfo,
  manualConfirmPayment
};

