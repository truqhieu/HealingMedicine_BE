const paymentService = require('../services/payment.service');
const sepayService = require('../services/sepay.service');

/**
 * Webhook t·ª´ Sepay khi c√≥ giao d·ªãch m·ªõi
 * T·ª∞ ƒê·ªòNG x·ª≠ l√Ω thanh to√°n - KH√îNG C·∫¶N MANUAL
 */
const handleSepayWebhook = async (req, res) => {
  const startTime = Date.now();
  
  try {
    console.log('\n' + '='.repeat(70));
    console.log('üîî WEBHOOK T·ª∞ ƒê·ªòNG - Nh·∫≠n th√¥ng b√°o t·ª´ Sepay');
    console.log('='.repeat(70));
    console.log('üì¶ Webhook Data:', JSON.stringify(req.body, null, 2));
    console.log('üìã Headers:', JSON.stringify(req.headers, null, 2));

    // QUAN TR·ªåNG: Lu√¥n tr·∫£ v·ªÅ 200 OK ngay ƒë·ªÉ Sepay kh√¥ng retry
    // X·ª≠ l√Ω logic trong background
    res.status(200).json({ 
      received: true, 
      message: 'Webhook received, processing...',
      timestamp: new Date().toISOString()
    });

    // Parse webhook data
    const webhookData = sepayService.parseWebhookData(req.body);
    console.log('üìä Parsed Data:', webhookData);
    console.log('üí≥ T√†i kho·∫£n nh·∫≠n:', webhookData.accountNumber, '(MBBank)');
    
    // L·∫•y appointment ID t·ª´ content
    // Content format: "APPOINTMENT {shortId}"
    const content = webhookData.content;
    const match = content.match(/APPOINTMENT\s+([A-Z0-9]+)/i);
    
    if (!match) {
      console.log('‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y appointment ID trong content:', content);
      console.log('   ‚Üí B·ªè qua giao d·ªãch n√†y (kh√¥ng ph·∫£i t·ª´ h·ªá th·ªëng)');
      return;
    }

    const shortId = match[1];
    console.log('üîç T√¨m ki·∫øm appointment v·ªõi Short ID:', shortId);

    // T√¨m appointment theo short ID (8 k√Ω t·ª± cu·ªëi)
    const Appointment = require('../models/appointment.model');
    const appointments = await Appointment.find({
      status: 'PendingPayment'
    }).populate('paymentId');

    console.log(`üìã T√¨m th·∫•y ${appointments.length} appointment ƒëang ch·ªù thanh to√°n`);

    const appointment = appointments.find(apt => {
      const aptShortId = apt._id.toString().slice(-8).toUpperCase();
      return aptShortId === shortId;
    });

    if (!appointment) {
      console.log('‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y appointment v·ªõi shortId:', shortId);
      console.log('   ‚Üí C√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥ ho·∫∑c ƒë√£ h·ªßy');
      return;
    }

    console.log('‚úÖ T√¨m th·∫•y appointment:', appointment._id);
    console.log('   - Status hi·ªán t·∫°i:', appointment.status);
    console.log('   - Payment ID:', appointment.paymentId._id);

    // Ki·ªÉm tra s·ªë ti·ªÅn
    const expectedAmount = appointment.paymentId.amount;
    const receivedAmount = webhookData.amount;
    
    console.log('üí∞ Ki·ªÉm tra s·ªë ti·ªÅn:');
    console.log('   - S·ªë ti·ªÅn c·∫ßn thanh to√°n:', expectedAmount.toLocaleString(), 'VND');
    console.log('   - S·ªë ti·ªÅn ƒë√£ nh·∫≠n:', receivedAmount.toLocaleString(), 'VND');
    
    if (receivedAmount < expectedAmount) {
      console.log('‚ùå S·ªë ti·ªÅn kh√¥ng ƒë·ªß! C·∫ßn th√™m:', (expectedAmount - receivedAmount).toLocaleString(), 'VND');
      return;
    }

    // ‚ú® T·ª∞ ƒê·ªòNG CONFIRM PAYMENT - KH√îNG C·∫¶N MANUAL!
    console.log('üöÄ ƒêang t·ª± ƒë·ªông x√°c nh·∫≠n thanh to√°n...');
    
    const result = await paymentService.confirmPayment(appointment.paymentId._id, webhookData);

    const processingTime = Date.now() - startTime;
    
    console.log('\n' + 'üéâ'.repeat(35));
    console.log('‚úÖ THANH TO√ÅN T·ª∞ ƒê·ªòNG TH√ÄNH C√îNG!');
    console.log('='.repeat(70));
    console.log('üìÑ Appointment ID:', appointment._id);
    console.log('üí≥ Payment ID:', appointment.paymentId._id);
    console.log('üí∞ S·ªë ti·ªÅn:', receivedAmount.toLocaleString(), 'VND');
    console.log('üìä Status m·ªõi:', result.appointment?.status || 'Pending');
    console.log('‚è±Ô∏è  Th·ªùi gian x·ª≠ l√Ω:', processingTime, 'ms');
    console.log('üîî L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã cho STAFF');
    console.log('='.repeat(70) + '\n');

  } catch (error) {
    console.error('\n' + '‚ùå'.repeat(35));
    console.error('L·ªñI X·ª¨ L√ù WEBHOOK:', error);
    console.error('Stack:', error.stack);
    console.error('='.repeat(70) + '\n');
    
    // Log ƒë·ªÉ admin c√≥ th·ªÉ manual check n·∫øu c·∫ßn
    console.error('‚ö†Ô∏è  C·∫¶N KI·ªÇM TRA TH·ª¶ C√îNG:');
    console.error('   - Webhook data:', JSON.stringify(req.body, null, 2));
    console.error('   - Error:', error.message);
  }
};

/**
 * Manual check payment status (cho user check)
 */
const checkPaymentStatus = async (req, res) => {
  try {
    const { paymentId } = req.params;

    // Check v√† confirm payment n·∫øu ƒë√£ c√≥ giao d·ªãch
    const result = await paymentService.checkAndConfirmPayment(paymentId);

    if (result && result.appointment) {
      return res.status(200).json({
        success: true,
        message: 'Thanh to√°n th√†nh c√¥ng',
        data: {
          payment: result.payment,
          appointment: result.appointment,
          confirmed: true
        }
      });
    }

    // Ch∆∞a c√≥ giao d·ªãch
    const payment = await paymentService.getPaymentInfo(paymentId);
    
    res.status(200).json({
      success: true,
      message: 'Ch∆∞a nh·∫≠n ƒë∆∞·ª£c thanh to√°n',
      data: {
        payment,
        confirmed: false
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói check payment:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói ki·ªÉm tra thanh to√°n',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

/**
 * L·∫•y th√¥ng tin thanh to√°n
 */
const getPaymentInfo = async (req, res) => {
  try {
    const { paymentId } = req.params;

    const payment = await paymentService.getPaymentInfo(paymentId);

    res.status(200).json({
      success: true,
      data: { payment }
    });

  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y payment info:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói l·∫•y th√¥ng tin thanh to√°n',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

/**
 * Manual confirm payment (cho admin)
 */
const manualConfirmPayment = async (req, res) => {
  try {
    const { paymentId } = req.params;

    // Check if user is admin/staff
    if (!['Admin', 'Staff', 'Manager'].includes(req.user?.role)) {
      return res.status(403).json({
        success: false,
        message: 'Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y'
      });
    }

    const result = await paymentService.confirmPayment(paymentId, {
      manualConfirm: true,
      confirmedBy: req.user.userId
    });

    res.status(200).json({
      success: true,
      message: 'ƒê√£ x√°c nh·∫≠n thanh to√°n th·ªß c√¥ng',
      data: result
    });

  } catch (error) {
    console.error('‚ùå L·ªói confirm payment:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói x√°c nh·∫≠n thanh to√°n',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

/**
 * Test webhook endpoint - ƒë·ªÉ manually verify webhook ho·∫°t ƒë·ªông
 */
const testWebhook = async (req, res) => {
  try {
    console.log('\n' + '='.repeat(70));
    console.log('üß™ TEST WEBHOOK - Ki·ªÉm tra webhook handler ho·∫°t ƒë·ªông');
    console.log('='.repeat(70));

    // L·∫•y appointment pending payment ƒë·∫ßu ti√™n
    const Appointment = require('../models/appointment.model');
    const appointments = await Appointment.find({
      status: 'PendingPayment'
    })
      .populate('paymentId')
      .sort({ createdAt: -1 })
      .limit(1);

    if (appointments.length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Kh√¥ng c√≥ appointment n√†o ƒëang ch·ªù thanh to√°n'
      });
    }

    const appointment = appointments[0];
    const payment = appointment.paymentId;

    console.log('üìÑ Test Appointment:', appointment._id);
    console.log('üí≥ Payment ID:', payment._id);
    console.log('üí∞ Amount:', payment.amount);

    // T·∫°o mock webhook data t·ª´ Sepay
    const mockWebhookData = {
      id: Date.now(),
      gateway_transaction_id: 'TEST_' + Date.now(),
      account_number: '3950450728',
      amount_in: payment.amount,
      transaction_content: `APPOINTMENT ${appointment._id.toString().slice(-8).toUpperCase()}`,
      transaction_date: new Date().toISOString(),
      reference_number: 'TEST_REF_' + Date.now(),
      bank_account: 'BIDV'
    };

    console.log('üì¶ Mock Webhook Data:', JSON.stringify(mockWebhookData, null, 2));

    // Call webhook handler
    const mockRes = {
      statusCode: 200,
      jsonData: null,
      status: function (code) {
        this.statusCode = code;
        return this;
      },
      json: function (data) {
        this.jsonData = data;
        return this;
      }
    };

    const mockReq = {
      body: mockWebhookData,
      headers: {}
    };

    await handleSepayWebhook(mockReq, mockRes);

    // Check result
    const updatedAppointment = await Appointment.findById(appointment._id);

    res.status(200).json({
      success: true,
      message: '‚úÖ Test webhook th√†nh c√¥ng',
      data: {
        appointmentId: appointment._id,
        previousStatus: appointment.status,
        newStatus: updatedAppointment.status,
        paymentStatus: updatedAppointment.paymentId?.status,
        testData: mockWebhookData
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói test webhook:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói test webhook',
      error: error.message
    });
  }
};

module.exports = {
  handleSepayWebhook,
  checkPaymentStatus,
  getPaymentInfo,
  manualConfirmPayment,
  testWebhook
};

