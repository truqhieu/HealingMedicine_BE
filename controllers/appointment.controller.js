const appointmentService = require('../services/appointment.service');
const emailService = require('../services/email.service');
const Policy = require('../models/policy.model');

const createConsultationAppointment = async (req, res) => {
  try {
    const {
      phoneNumber,
      appointmentFor,
      serviceId,
      doctorUserId, 
      doctorScheduleId,
      selectedSlot,
      notes
    } = req.body;

    // fullName v√† email c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c g·ª≠i n·∫øu appointmentFor l√† 'self'
    let { fullName, email } = req.body;

    console.log('üîç DEBUG createConsultationAppointment:');
    console.log('   - req.user:', req.user);
    console.log('   - req.headers.authorization:', req.headers.authorization ? 'EXISTS' : 'MISSING');
    console.log('   - req.body:', {
      fullName,
      email,
      phoneNumber,
      appointmentFor,
      serviceId,
      doctorUserId,
      doctorScheduleId,
      selectedSlot
    });

    // L·∫•y th√¥ng tin user ƒë√£ ƒëƒÉng nh·∫≠p
    const userId = req.user?.userId;

    console.log('   - userId extracted:', userId);

    if (!userId) {
      console.error('‚ùå userId is missing!');
      return res.status(401).json({
        success: false,
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t l·ªãch t∆∞ v·∫•n'
      });
    }

    // Validation c√°c tr∆∞·ªùng b·∫Øt bu·ªôc t·ª´ form
    if (!serviceId || !doctorUserId || !doctorScheduleId || !selectedSlot) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß d·ªãch v·ª• t∆∞ v·∫•n, b√°c sƒ© v√† khung gi·ªù'
      });
    }

    if (!selectedSlot.startTime || !selectedSlot.endTime) {
      return res.status(400).json({
        success: false,
        message: 'Th√¥ng tin khung gi·ªù kh√¥ng h·ª£p l·ªá'
      });
    }

    if (!phoneNumber) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i'
      });
    }

    const phoneRegex = /^[0-9]{10,11}$/;
    if (!phoneRegex.test(phoneNumber)) {
      return res.status(400).json({
        success: false,
        message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (ph·∫£i l√† 10-11 s·ªë)'
      });
    }

    // N·∫øu ƒë·∫∑t cho ng∆∞·ªùi kh√°c (customer), b·∫Øt bu·ªôc nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n v√† email
    if (appointmentFor === 'other') {
      if (!fullName || !email) {
        return res.status(400).json({
          success: false,
          message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n v√† email c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c ƒë·∫∑t l·ªãch (customer)'
        });
      }

      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return res.status(400).json({
          success: false,
          message: 'Email c·ªßa customer kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng'
        });
      }
    }

    // T·∫°o appointment data
    const appointmentData = {
      patientUserId: userId, 
      doctorUserId: doctorUserId, 
      serviceId: serviceId,
      doctorScheduleId: doctorScheduleId,
      selectedSlot: selectedSlot, 
      notes: notes || null,
      formData: {
        fullName: fullName || '',
        email: email || '',
        phoneNumber,
        appointmentFor: appointmentFor || 'self'
      }
    };

    const appointment = await appointmentService.createConsultationAppointment(appointmentData);

    let emailRecipient, recipientName;
    
    if (appointment.customerId) {
      // N·∫øu c√≥ customerId = ƒë·∫∑t cho ng∆∞·ªùi kh√°c ‚Üí g·ª≠i email cho customer
      emailRecipient = appointment.customerId.email;
      recipientName = appointment.customerId.fullName;
    } else {
      // N·∫øu kh√¥ng c√≥ customerId = ƒë·∫∑t cho b·∫£n th√¢n ‚Üí g·ª≠i email cho user
      emailRecipient = appointment.patientUserId.email;
      recipientName = appointment.patientUserId.fullName;
    }

    // Prepare email data
    const emailData = {
      fullName: recipientName,
      serviceName: appointment.serviceId.serviceName,
      doctorName: appointment.doctorUserId.fullName,
      startTime: appointment.timeslotId.startTime,
      endTime: appointment.timeslotId.endTime,
      type: appointment.type,
      mode: appointment.mode
    };

    // X√°c ƒë·ªãnh message v√† response d·ª±a v√†o status
    let successMessage;
    let responseData = {
      appointmentId: appointment._id,
      service: appointment.serviceId.serviceName,
      doctor: appointment.doctorUserId.fullName,
      startTime: appointment.timeslotId.startTime,
      endTime: appointment.timeslotId.endTime,
      status: appointment.status,
      type: appointment.type,
      mode: appointment.mode
    };

    // N·∫øu appointment c·∫ßn thanh to√°n tr∆∞·ªõc
    if (appointment.status === 'PendingPayment' && appointment.paymentId) {
      successMessage = 'Vui l√≤ng thanh to√°n ƒë·ªÉ ho√†n t·∫•t ƒë·∫∑t l·ªãch. Slot s·∫Ω ƒë∆∞·ª£c gi·ªØ trong 15 ph√∫t.';
      
      // Th√™m th√¥ng tin thanh to√°n v√†o response
      responseData.payment = {
        paymentId: appointment.paymentId._id,
        amount: appointment.paymentId.amount,
        method: appointment.paymentId.method,
        status: appointment.paymentId.status,
        expiresAt: appointment.paymentHoldExpiresAt,
        QRurl: appointment.paymentId.QRurl
      };
      
      responseData.requirePayment = true;
      
      // KH√îNG g·ª≠i email v√¨ ch∆∞a thanh to√°n
      console.log('‚è≥ Appointment ƒëang ch·ªù thanh to√°n, kh√¥ng g·ª≠i email');
    } else {
      // Appointment kh√¥ng c·∫ßn thanh to√°n ho·∫∑c ƒë√£ thanh to√°n
      successMessage = appointment.customerId
        ? `ƒê·∫∑t l·ªãch t∆∞ v·∫•n th√†nh c√¥ng! Email x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ${emailRecipient}`
        : 'ƒê·∫∑t l·ªãch t∆∞ v·∫•n th√†nh c√¥ng! Email x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn h·ªôp th∆∞ c·ªßa b·∫°n.';
      
      responseData.requirePayment = false;

      // G·ª≠i email x√°c nh·∫≠n (ch·ªâ khi kh√¥ng c·∫ßn thanh to√°n)
      try {
        await emailService.sendAppointmentConfirmationEmail(
          emailRecipient,
          emailData
        );
        console.log(`üìß ƒê√£ g·ª≠i email x√°c nh·∫≠n ƒë·∫øn: ${emailRecipient}`);
      } catch (emailError) {
        console.error('L·ªói g·ª≠i email:', emailError);
      }
    }

    res.status(201).json({
      success: true,
      message: successMessage,
      data: responseData
    });

  } catch (error) {
    console.error('L·ªói ƒë·∫∑t l·ªãch t∆∞ v·∫•n:', error);

    // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ
    if (error.message.includes('Khung gi·ªù') || 
        error.message.includes('D·ªãch v·ª•') || 
        error.message.includes('B√°c sƒ©') ||
        error.message.includes('kh√¥ng t·ªìn t·∫°i') ||
        error.message.includes('kh√¥ng kh·∫£ d·ª•ng') ||
        error.message.includes('Thi·∫øu th√¥ng tin')) {
      return res.status(400).json({
        success: false,
        message: error.message
      });
    }

    res.status(500).json({
      success: false,
      message: 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

const reviewAppointment = async (req, res) => {
  try {
    const { appointmentId, action, cancelReason } = req.body;
    const staffUserId = req.user?.userId;

    // Validation
    if (!appointmentId) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p ID l·ªãch h·∫πn'
      });
    }

    // ‚≠ê Convert action to lowercase (case-insensitive)
    const normalizedAction = action?.toLowerCase().trim();

    if (!normalizedAction || !['approve', 'cancel'].includes(normalizedAction)) {
      return res.status(400).json({
        success: false,
        message: 'Action ph·∫£i l√† "approve" ho·∫∑c "cancel" (kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng)'
      });
    }

    if (normalizedAction === 'cancel' && !cancelReason) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p l√Ω do h·ªßy l·ªãch'
      });
    }

    if (!staffUserId) {
      return res.status(401).json({
        success: false,
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ x·ª≠ l√Ω l·ªãch h·∫πn'
      });
    }

    // G·ªçi service v·ªõi normalizedAction
    const result = await appointmentService.reviewAppointment(
      appointmentId,
      staffUserId,
      normalizedAction,
      cancelReason
    );

    res.status(200).json(result);

  } catch (error) {
    console.error('L·ªói x·ª≠ l√Ω l·ªãch h·∫πn:', error);

    if (error.message.includes('Kh√¥ng t√¨m th·∫•y') || 
        error.message.includes('Kh√¥ng th·ªÉ') ||
        error.message.includes('ph·∫£i l√†')) {
      return res.status(400).json({
        success: false,
        message: error.message
      });
    }

    res.status(500).json({
      success: false,
      message: 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

const getPendingAppointments = async (req, res) => {
  try {
    const { doctorUserId, startDate, endDate } = req.query;

    const filters = {};
    if (doctorUserId) filters.doctorUserId = doctorUserId;
    if (startDate && endDate) {
      filters.startDate = startDate;
      filters.endDate = endDate;
    }

    const result = await appointmentService.getPendingAppointments(filters);

    res.status(200).json(result);

  } catch (error) {
    console.error('L·ªói l·∫•y danh s√°ch l·ªãch h·∫πn ch·ªù duy·ªát:', error);

    res.status(500).json({
      success: false,
      message: 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

const getAllAppointments = async (req, res) => {
  try {
    const { status, doctorUserId, patientUserId, mode, type } = req.query;

    const filters = {};
    if (status) filters.status = status;
    if (doctorUserId) filters.doctorUserId = doctorUserId;
    if (patientUserId) filters.patientUserId = patientUserId;
    if (mode) filters.mode = mode;
    if (type) filters.type = type;

    const result = await appointmentService.getAllAppointments(filters);

    res.status(200).json(result);

  } catch (error) {
    console.error('L·ªói l·∫•y danh s√°ch l·ªãch h·∫πn:', error);

    res.status(500).json({
      success: false,
      message: 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

/**
 * L·∫•y t·∫•t c·∫£ ca kh√°m c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 * GET /api/appointments/my-appointments
 * 
 * Logic:
 *   - M·∫∑c ƒë·ªãnh: L·∫•y t·∫•t c·∫£ c√°c ca kh√°m ƒë√£ ho√†n t·∫•t ƒë·∫∑t l·ªãch (Pending, Approved, CheckedIn, Completed, Cancelled)
 *     ‚Üí Bao g·ªìm c·∫£ ƒë·∫∑t l·ªãch kh√°m (kh√¥ng c·∫ßn thanh to√°n) v√† t∆∞ v·∫•n ƒë√£ thanh to√°n xong
 *   - KH√îNG bao g·ªìm: PendingPayment (c√°c ca t∆∞ v·∫•n ƒëang ch·ªù thanh to√°n)
 * 
 * Query params:
 *   - includePendingPayment: true/false (c√≥ bao g·ªìm c·∫£ ca ƒëang ch·ªù thanh to√°n kh√¥ng)
 *   - status: Pending|Approved|CheckedIn|Completed|Cancelled|PendingPayment (l·ªçc theo status c·ª• th·ªÉ)
 */
const getMyAppointments = async (req, res) => {
  try {
    const userId = req.user?.userId;

    if (!userId) {
      return res.status(401).json({
        success: false,
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem ca kh√°m'
      });
    }

    // L·∫•y options t·ª´ query params
    const options = {};
    
    // C√≥ bao g·ªìm c·∫£ ca ƒëang ch·ªù thanh to√°n kh√¥ng
    if (req.query.includePendingPayment === 'true') {
      options.includePendingPayment = true;
    }

    // L·ªçc theo status c·ª• th·ªÉ
    if (req.query.status) {
      options.status = req.query.status;
    }

    console.log('üîç [getMyAppointments] Fetching appointments for userId:', userId);
    console.log('üîç [getMyAppointments] Options:', options);
    
    const appointments = await appointmentService.getUserAppointments(userId, options);

    console.log('‚úÖ [getMyAppointments] Returning:', appointments.length, 'appointments');

    res.status(200).json({
      success: true,
      message: `T√¨m th·∫•y ${appointments.length} ca kh√°m`,
      data: appointments,
      count: appointments.length
    });

  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y ca kh√°m c·ªßa user:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i ca kh√°m
 * - Staff: Approved ‚Üí CheckedIn (check-in b·ªánh nh√¢n)
 * - Nurse: CheckedIn ‚Üí
 * PUT /api/appointments/:appointmentId/status
 * Body: { status: 'CheckedIn' | 'Completed' | 'Cancelled' }
 */
const updateAppointmentStatus = async (req, res) => {
  try {
    const { appointmentId } = req.params;
    const { status } = req.body;
    const userId = req.user?.userId;

    // Validation
    if (!appointmentId) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p ID l·ªãch h·∫πn'
      });
    }

    const allowedStatuses = ['CheckedIn', 'Completed', 'Cancelled'];
    if (!status || !allowedStatuses.includes(status)) {
      return res.status(400).json({
        success: false,
        message: `Tr·∫°ng th√°i ph·∫£i l√† m·ªôt trong: ${allowedStatuses.join(', ')}`
      });
    }

    if (!userId) {
      return res.status(401).json({
        success: false,
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p'
      });
    }

    // G·ªçi service ƒë·ªÉ c·∫≠p nh·∫≠t
    const result = await appointmentService.updateAppointmentStatus(
      appointmentId,
      status,
      userId
    );

    res.status(200).json(result);

  } catch (error) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i ca kh√°m:', error);

    if (error.message.includes('Kh√¥ng t√¨m th·∫•y') || 
        error.message.includes('Kh√¥ng th·ªÉ') ||
        error.message.includes('ch·ªâ c√≥ th·ªÉ')) {
      return res.status(400).json({
        success: false,
        message: error.message
      });
    }

    res.status(500).json({
      success: false,
      message: 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

/**
 * H·ªßy ca kh√°m v·ªõi logic kh√°c nhau cho Examination/Consultation
 * DELETE /api/appointments/:appointmentId/cancel
 * Body: { cancelReason?: string }
 */
const cancelAppointment = async (req, res) => {
  try {
    const { appointmentId } = req.params;
    const { cancelReason } = req.body;
    const userId = req.user?.userId;

    // Validation
    if (!appointmentId) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p ID l·ªãch h·∫πn'
      });
    }

    if (!userId) {
      return res.status(401).json({
        success: false,
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ h·ªßy l·ªãch h·∫πn'
      });
    }

    // L·∫•y th√¥ng tin appointment
    const appointment = await appointmentService.getAppointmentById(appointmentId);
    if (!appointment) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn'
      });
    }

    // Ki·ªÉm tra quy·ªÅn h·ªßy l·ªãch (ch·ªâ ng∆∞·ªùi ƒë·∫∑t l·ªãch m·ªõi ƒë∆∞·ª£c h·ªßy)
    if (appointment.patientUserId._id.toString() !== userId) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy l·ªãch h·∫πn n√†y'
      });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i appointment c√≥ th·ªÉ h·ªßy ƒë∆∞·ª£c kh√¥ng
    const cancellableStatuses = ['Pending', 'Approved', 'PendingPayment'];
    if (!cancellableStatuses.includes(appointment.status)) {
      return res.status(400).json({
        success: false,
        message: 'L·ªãch h·∫πn n√†y kh√¥ng th·ªÉ h·ªßy ƒë∆∞·ª£c'
      });
    }

    // Logic kh√°c nhau cho Examination v√† Consultation
    if (appointment.type === 'Examination') {
      // H·ªßy b√¨nh th∆∞·ªùng cho Examination
      const result = await appointmentService.cancelAppointment(appointmentId, cancelReason, userId);
      
      res.status(200).json({
        success: true,
        message: 'H·ªßy l·ªãch kh√°m th√†nh c√¥ng',
        data: result
      });
    } else if (appointment.type === 'Consultation') {
      // Cho Consultation, tr·∫£ v·ªÅ th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ hi·ªÉn th·ªã popup
      const policies = await Policy.getActivePolicies();
      
      res.status(200).json({
        success: true,
        message: 'X√°c nh·∫≠n h·ªßy l·ªãch t∆∞ v·∫•n',
        data: {
          appointment: {
            id: appointment._id,
            type: appointment.type,
            serviceName: appointment.serviceId.serviceName,
            doctorName: appointment.doctorUserId.fullName,
            startTime: appointment.timeslotId.startTime,
            endTime: appointment.timeslotId.endTime,
            status: appointment.status
          },
          policies: policies,
          requiresConfirmation: true
        }
      });
    } else {
      return res.status(400).json({
        success: false,
        message: 'Lo·∫°i l·ªãch h·∫πn kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£'
      });
    }

  } catch (error) {
    console.error('L·ªói h·ªßy l·ªãch h·∫πn:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

/**
 * X√°c nh·∫≠n h·ªßy l·ªãch t∆∞ v·∫•n (sau khi user x√°c nh·∫≠n trong popup)
 * POST /api/appointments/:appointmentId/confirm-cancel
 * Body: { confirmed: boolean, cancelReason?: string }
 */
const confirmCancelAppointment = async (req, res) => {
  try {
    const { appointmentId } = req.params;
    const { confirmed, cancelReason, bankInfo } = req.body;
    const userId = req.user?.userId;

    // Validation
    if (!appointmentId) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p ID l·ªãch h·∫πn'
      });
    }

    if (typeof confirmed !== 'boolean') {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng x√°c nh·∫≠n c√≥ mu·ªën h·ªßy l·ªãch hay kh√¥ng'
      });
    }

    if (!userId) {
      return res.status(401).json({
        success: false,
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p'
      });
    }

    if (confirmed) {
      // User x√°c nh·∫≠n h·ªßy
      const result = await appointmentService.cancelAppointment(appointmentId, cancelReason, userId, bankInfo);
      
      res.status(200).json({
        success: true,
        message: 'H·ªßy l·ªãch t∆∞ v·∫•n th√†nh c√¥ng',
        data: result
      });
    } else {
      // User kh√¥ng h·ªßy
      res.status(200).json({
        success: true,
        message: 'ƒê√£ h·ªßy b·ªè thao t√°c h·ªßy l·ªãch h·∫πn',
        data: { cancelled: false }
      });
    }

  } catch (error) {
    console.error('L·ªói x√°c nh·∫≠n h·ªßy l·ªãch h·∫πn:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

module.exports = {
  createConsultationAppointment,
  reviewAppointment,
  getPendingAppointments,
  getAllAppointments,
  getMyAppointments,
  updateAppointmentStatus,
  cancelAppointment,
  confirmCancelAppointment
};
