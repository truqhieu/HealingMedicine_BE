const appointmentService = require('../services/appointment.service');
const emailService = require('../services/email.service');
const Policy = require('../models/policy.model');
const Appointment = require('../models/appointment.model');

const createConsultationAppointment = async (req, res) => {
  try {
    const {
      phoneNumber,
      appointmentFor,
      serviceId,
      doctorUserId, 
      doctorScheduleId,
      selectedSlot,
      notes
    } = req.body;

    // fullName v√† email c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c g·ª≠i n·∫øu appointmentFor l√† 'self'
    let { fullName, email } = req.body;

    console.log('üîç DEBUG createConsultationAppointment:');
    console.log('   - req.user:', req.user);
    console.log('   - req.headers.authorization:', req.headers.authorization ? 'EXISTS' : 'MISSING');
    console.log('   - req.body:', {
      fullName,
      email,
      phoneNumber,
      appointmentFor,
      serviceId,
      doctorUserId,
      doctorScheduleId,
      selectedSlot
    });

    // L·∫•y th√¥ng tin user ƒë√£ ƒëƒÉng nh·∫≠p
    const userId = req.user?.userId;

    console.log('   - userId extracted:', userId);

    if (!userId) {
      console.error('‚ùå userId is missing!');
      return res.status(401).json({
        success: false,
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t l·ªãch t∆∞ v·∫•n'
      });
    }

    // Validation c√°c tr∆∞·ªùng b·∫Øt bu·ªôc t·ª´ form
    if (!serviceId || !doctorUserId || !doctorScheduleId || !selectedSlot) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin: d·ªãch v·ª•, b√°c sƒ©, l·ªãch l√†m vi·ªác v√† khung gi·ªù'
      });
    }

    // Validation selectedSlot
    if (!selectedSlot.startTime || !selectedSlot.endTime) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng ch·ªçn khung gi·ªù h·ª£p l·ªá'
      });
    }

    // N·∫øu appointmentFor l√† 'other', c·∫ßn fullName v√† email
    if (appointmentFor === 'other') {
      if (!fullName || !email) {
        return res.status(400).json({
          success: false,
          message: 'Khi ƒë·∫∑t l·ªãch cho ng∆∞·ªùi kh√°c, vui l√≤ng cung c·∫•p h·ªç t√™n v√† email'
        });
      }
    }

    // N·∫øu appointmentFor l√† 'self', l·∫•y th√¥ng tin t·ª´ user ƒë√£ ƒëƒÉng nh·∫≠p
    if (appointmentFor === 'self') {
      const User = require('../models/user.model');
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng'
        });
      }
      fullName = user.fullName;
      email = user.email;
    }

    console.log('   - Final fullName:', fullName);
    console.log('   - Final email:', email);

    // G·ªçi service ƒë·ªÉ t·∫°o appointment
    const result = await appointmentService.createConsultationAppointment({
      patientUserId: userId,
      fullName,
      email,
      phoneNumber,
      appointmentFor,
      serviceId,
      doctorUserId,
      doctorScheduleId,
      selectedSlot,
      notes
    });

    console.log('‚úÖ Appointment created successfully:', result);

    return res.status(201).json({
      success: true,
      message: 'ƒê·∫∑t l·ªãch t∆∞ v·∫•n th√†nh c√¥ng',
      data: result
    });

  } catch (error) {
    console.error('‚ùå Error in createConsultationAppointment:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server khi t·∫°o l·ªãch t∆∞ v·∫•n',
      error: error.message
    });
  }
};

const reviewAppointment = async (req, res) => {
  try {
    const { appointmentId, action, cancelReason } = req.body;

    if (!appointmentId || !action) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p ID l·ªãch h·∫πn v√† h√†nh ƒë·ªông'
      });
    }

    if (!['approve', 'cancel'].includes(action)) {
      return res.status(400).json({
        success: false,
        message: 'H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: approve, cancel'
      });
    }

    if (action === 'cancel' && !cancelReason) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p l√Ω do h·ªßy l·ªãch'
      });
    }

    const result = await appointmentService.reviewAppointment({
      appointmentId,
      action,
      cancelReason
    });

    return res.status(200).json({
      success: true,
      message: action === 'approve' ? 'Duy·ªát l·ªãch h·∫πn th√†nh c√¥ng' : 'H·ªßy l·ªãch h·∫πn th√†nh c√¥ng',
      data: result
    });

  } catch (error) {
    console.error('‚ùå Error in reviewAppointment:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server khi x·ª≠ l√Ω l·ªãch h·∫πn',
      error: error.message
    });
  }
};

const getPendingAppointments = async (req, res) => {
  try {
    const appointments = await appointmentService.getPendingAppointments();
    
    return res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch l·ªãch h·∫πn ch·ªù duy·ªát th√†nh c√¥ng',
      data: appointments
    });

  } catch (error) {
    console.error('‚ùå Error in getPendingAppointments:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server khi l·∫•y danh s√°ch l·ªãch h·∫πn ch·ªù duy·ªát',
      error: error.message
    });
  }
};

const getAllAppointments = async (req, res) => {
  try {
    const { status, startDate, endDate, doctorId, serviceId, page = 1, limit = 10 } = req.query;
    
    const appointments = await appointmentService.getAllAppointments({
      status,
      startDate,
      endDate,
      doctorId,
      serviceId,
      page: parseInt(page),
      limit: parseInt(limit)
    });
    
    return res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch t·∫•t c·∫£ l·ªãch h·∫πn th√†nh c√¥ng',
      data: appointments
    });

  } catch (error) {
    console.error('‚ùå Error in getAllAppointments:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server khi l·∫•y danh s√°ch l·ªãch h·∫πn',
      error: error.message
    });
  }
};

const getMyAppointments = async (req, res) => {
  try {
    const userId = req.user?.userId;
    const { includePendingPayment, status } = req.query;

    if (!userId) {
      return res.status(401).json({
        success: false,
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem l·ªãch h·∫πn'
      });
    }

    const appointments = await appointmentService.getUserAppointments(
      userId,
      {
        includePendingPayment: includePendingPayment === 'true',
        status,
      }
    );
    
    return res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch l·ªãch h·∫πn c·ªßa b·∫°n th√†nh c√¥ng',
      data: appointments
    });

  } catch (error) {
    console.error('‚ùå Error in getMyAppointments:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server khi l·∫•y danh s√°ch l·ªãch h·∫πn',
      error: error.message
    });
  }
};

const updateAppointmentStatus = async (req, res) => {
  try {
    const { appointmentId } = req.params;
    const { status } = req.body;

    if (!appointmentId || !status) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p ID l·ªãch h·∫πn v√† tr·∫°ng th√°i m·ªõi'
      });
    }

    if (!['CheckedIn', 'Completed', 'Cancelled'].includes(status)) {
      return res.status(400).json({
        success: false,
        message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: CheckedIn, Completed, Cancelled'
      });
    }

    const result = await appointmentService.updateAppointmentStatus({
      appointmentId,
      status
    });

    return res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch h·∫πn th√†nh c√¥ng',
      data: result
    });

  } catch (error) {
    console.error('‚ùå Error in updateAppointmentStatus:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch h·∫πn',
      error: error.message
    });
  }
};

const cancelAppointment = async (req, res) => {
  try {
    const { appointmentId } = req.params;
    const { cancelReason } = req.body;
    const userId = req.user?.userId;

    if (!appointmentId) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p ID l·ªãch h·∫πn'
      });
    }

    if (!userId) {
      return res.status(401).json({
        success: false,
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ h·ªßy l·ªãch h·∫πn'
      });
    }

    const result = await appointmentService.cancelAppointment({
      appointmentId,
      userId,
      cancelReason
    });

    return res.status(200).json({
      success: true,
      message: 'H·ªßy l·ªãch h·∫πn th√†nh c√¥ng',
      data: result
    });

  } catch (error) {
    console.error('‚ùå Error in cancelAppointment:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server khi h·ªßy l·ªãch h·∫πn',
      error: error.message
    });
  }
};

const confirmCancelAppointment = async (req, res) => {
  try {
    const { appointmentId } = req.params;
    const { confirmed, cancelReason, bankInfo } = req.body;
    const userId = req.user?.userId;

    if (!appointmentId) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p ID l·ªãch h·∫πn'
      });
    }

    if (!userId) {
      return res.status(401).json({
        success: false,
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ x√°c nh·∫≠n h·ªßy l·ªãch h·∫πn'
      });
    }

    if (confirmed === undefined) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng x√°c nh·∫≠n c√≥ mu·ªën h·ªßy l·ªãch h·∫πn kh√¥ng'
      });
    }

    const result = await appointmentService.confirmCancelAppointment({
      appointmentId,
      userId,
      confirmed,
      cancelReason,
      bankInfo
    });

    return res.status(200).json({
      success: true,
      message: confirmed ? 'X√°c nh·∫≠n h·ªßy l·ªãch h·∫πn th√†nh c√¥ng' : 'ƒê√£ h·ªßy thao t√°c h·ªßy l·ªãch h·∫πn',
      data: result
    });

  } catch (error) {
    console.error('‚ùå Error in confirmCancelAppointment:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server khi x√°c nh·∫≠n h·ªßy l·ªãch h·∫πn',
      error: error.message
    });
  }
};

const getAppointmentDetails = async (req, res) => {
  try {
    const { appointmentId } = req.params;

    if (!appointmentId) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p ID l·ªãch h·∫πn'
      });
    }

    const appointment = await appointmentService.getAppointmentDetails(appointmentId);

    if (!appointment) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn'
      });
    }

    return res.status(200).json({
      success: true,
      message: 'L·∫•y chi ti·∫øt l·ªãch h·∫πn th√†nh c√¥ng',
      data: appointment
    });

  } catch (error) {
    console.error('‚ùå Error in getAppointmentDetails:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server khi l·∫•y chi ti·∫øt l·ªãch h·∫πn',
      error: error.message
    });
  }
};

const markAsRefunded = async (req, res) => {
  try {
    const { appointmentId } = req.params;

    if (!appointmentId) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p ID l·ªãch h·∫πn'
      });
    }

    const result = await appointmentService.markAsRefunded(appointmentId);

    return res.status(200).json({
      success: true,
      message: 'ƒê√°nh d·∫•u ƒë√£ ho√†n ti·ªÅn th√†nh c√¥ng',
      data: result
    });

  } catch (error) {
    console.error('‚ùå Error in markAsRefunded:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server khi ƒë√°nh d·∫•u ƒë√£ ho√†n ti·ªÅn',
      error: error.message
    });
  }
};

// ‚≠ê B·ªánh nh√¢n g·ª≠i y√™u c·∫ßu ƒë·ªïi l·ªãch h·∫πn (ch·ªâ ƒë·ªïi ng√†y/gi·ªù)
const requestReschedule = async (req, res) => {
  try {
    const { appointmentId } = req.params;
    const { newStartTime, newEndTime } = req.body;
    const userId = req.user?.userId;

    console.log('üîç DEBUG requestReschedule:');
    console.log('   - appointmentId:', appointmentId);
    console.log('   - userId:', userId);
    console.log('   - newStartTime:', newStartTime);
    console.log('   - newEndTime:', newEndTime);

    // Validation
    if (!newStartTime || !newEndTime) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c m·ªõi'
      });
    }

    const newStart = new Date(newStartTime);
    const newEnd = new Date(newEndTime);

    if (newStart >= newEnd) {
      return res.status(400).json({
        success: false,
        message: 'Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n th·ªùi gian k·∫øt th√∫c'
      });
    }

    if (newStart <= new Date()) {
      return res.status(400).json({
        success: false,
        message: 'Th·ªùi gian m·ªõi ph·∫£i trong t∆∞∆°ng lai'
      });
    }

    // T√¨m appointment v√† ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
    const appointment = await Appointment.findById(appointmentId)
      .populate('patientUserId', 'fullName email')
      .populate('doctorUserId', 'fullName email')
      .populate('serviceId', 'serviceName')
      .populate('timeslotId');

    if (!appointment) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn'
      });
    }

    // L∆∞u th√¥ng tin c≈© tr∆∞·ªõc khi c·∫≠p nh·∫≠t
    const oldStartTime = appointment.timeslotId ? appointment.timeslotId.startTime : null;
    const oldEndTime = appointment.timeslotId ? appointment.timeslotId.endTime : null;

    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
    if (appointment.patientUserId._id.toString() !== userId) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi l·ªãch h·∫πn n√†y'
      });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i cho ph√©p ƒë·ªïi l·ªãch
    if (!['Pending', 'Approved'].includes(appointment.status)) {
      return res.status(400).json({
        success: false,
        message: 'Ch·ªâ c√≥ th·ªÉ ƒë·ªïi l·ªãch khi tr·∫°ng th√°i l√† Ch·ªù duy·ªát ho·∫∑c ƒê√£ x√°c nh·∫≠n'
      });
    }

    // Ki·ªÉm tra b√°c sƒ© c√≥ r·∫£nh trong khung gi·ªù m·ªõi kh√¥ng
    const DoctorSchedule = require('../models/doctorSchedule.model');
    const Timeslot = require('../models/timeslot.model');
    
    // T√¨m l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ© trong ng√†y m·ªõi
    const newDate = newStart.toISOString().split('T')[0];
    const doctorSchedule = await DoctorSchedule.findOne({
      doctorUserId: appointment.doctorUserId._id,
      date: newDate,
      isActive: true
    });

    if (!doctorSchedule) {
      return res.status(400).json({
        success: false,
        message: 'B√°c sƒ© kh√¥ng c√≥ l·ªãch l√†m vi·ªác trong ng√†y n√†y'
      });
    }

    // Ki·ªÉm tra timeslot c√≥ kh·ªõp kh√¥ng - t√¨m timeslot r·∫£nh trong ng√†y
    const timeslot = await Timeslot.findOne({
      doctorScheduleId: doctorSchedule._id,
      startTime: newStart,
      endTime: newEnd,
      status: 'Available'
    });

    if (!timeslot) {
      return res.status(400).json({
        success: false,
        message: 'Khung gi·ªù n√†y kh√¥ng c√≥ s·∫µn ho·∫∑c ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t. Vui l√≤ng ch·ªçn khung gi·ªù kh√°c.'
      });
    }

    // Ki·ªÉm tra xem c√≥ appointment n√†o kh√°c ƒë√£ ƒë·∫∑t timeslot n√†y ch∆∞a
    const existingAppointment = await Appointment.findOne({
      timeslotId: timeslot._id,
      status: { $nin: ['Cancelled', 'Expired'] },
      _id: { $ne: appointmentId }
    });

    if (existingAppointment) {
      return res.status(409).json({
        success: false,
        message: 'Khung gi·ªù n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t b·ªüi b·ªánh nh√¢n kh√°c'
      });
    }

    // C·∫≠p nh·∫≠t appointment v·ªõi th√¥ng tin m·ªõi
    appointment.timeslotId = timeslot._id;
    appointment.status = 'Pending'; // Reset v·ªÅ ch·ªù duy·ªát
    await appointment.save();

    // Kh√¥ng g·ª≠i email th√¥ng b√°o theo y√™u c·∫ßu

    console.log('‚úÖ Reschedule request successful');
    return res.status(200).json({
      success: true,
      message: 'Y√™u c·∫ßu ƒë·ªïi l·ªãch ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng',
      data: {
        appointmentId: appointment._id,
        newStartTime: newStartTime,
        newEndTime: newEndTime,
        status: 'Pending'
      }
    });

  } catch (error) {
    console.error('‚ùå Error in requestReschedule:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server khi x·ª≠ l√Ω y√™u c·∫ßu ƒë·ªïi l·ªãch',
      error: error.message
    });
  }
};

// ‚≠ê B·ªánh nh√¢n g·ª≠i y√™u c·∫ßu ƒë·ªïi b√°c sƒ© (ch·ªâ ƒë·ªïi b√°c sƒ©)
const requestChangeDoctor = async (req, res) => {
  try {
    const { appointmentId } = req.params;
    const { newDoctorUserId } = req.body;
    const userId = req.user?.userId;

    console.log('üîç DEBUG requestChangeDoctor:');
    console.log('   - appointmentId:', appointmentId);
    console.log('   - userId:', userId);
    console.log('   - newDoctorUserId:', newDoctorUserId);

    // Validation
    if (!newDoctorUserId) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p ID b√°c sƒ© m·ªõi'
      });
    }

    // T√¨m appointment v√† ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
    const appointment = await Appointment.findById(appointmentId)
      .populate('patientUserId', 'fullName email')
      .populate('doctorUserId', 'fullName email')
      .populate('serviceId', 'serviceName')
      .populate('timeslotId');

    if (!appointment) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn'
      });
    }

    // L∆∞u th√¥ng tin c≈© tr∆∞·ªõc khi c·∫≠p nh·∫≠t
    const oldDoctorName = appointment.doctorUserId.fullName;

    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
    if (appointment.patientUserId._id.toString() !== userId) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi l·ªãch h·∫πn n√†y'
      });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i cho ph√©p ƒë·ªïi b√°c sƒ©
    if (!['Pending', 'Approved'].includes(appointment.status)) {
      return res.status(400).json({
        success: false,
        message: 'Ch·ªâ c√≥ th·ªÉ ƒë·ªïi b√°c sƒ© khi tr·∫°ng th√°i l√† Ch·ªù duy·ªát ho·∫∑c ƒê√£ x√°c nh·∫≠n'
      });
    }

    // Ki·ªÉm tra b√°c sƒ© m·ªõi c√≥ t·ªìn t·∫°i kh√¥ng
    const User = require('../models/user.model');
    const newDoctor = await User.findById(newDoctorUserId);
    
    if (!newDoctor || newDoctor.role !== 'Doctor') {
      return res.status(400).json({
        success: false,
        message: 'B√°c sƒ© kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng h·ª£p l·ªá'
      });
    }

    // Ki·ªÉm tra b√°c sƒ© m·ªõi c√≥ kh√°c b√°c sƒ© c≈© kh√¥ng
    if (appointment.doctorUserId._id.toString() === newDoctorUserId) {
      return res.status(400).json({
        success: false,
        message: 'B√°c sƒ© m·ªõi ph·∫£i kh√°c b√°c sƒ© hi·ªán t·∫°i'
      });
    }

    // Ki·ªÉm tra b√°c sƒ© m·ªõi c√≥ r·∫£nh trong khung gi·ªù hi·ªán t·∫°i kh√¥ng
    const DoctorSchedule = require('../models/doctorSchedule.model');
    const Timeslot = require('../models/timeslot.model');
    
    const currentDate = new Date(appointment.timeslotId.startTime).toISOString().split('T')[0];
    const doctorSchedule = await DoctorSchedule.findOne({
      doctorUserId: newDoctorUserId,
      date: currentDate,
      isActive: true
    });

    if (!doctorSchedule) {
      return res.status(400).json({
        success: false,
        message: 'B√°c sƒ© m·ªõi kh√¥ng c√≥ l·ªãch l√†m vi·ªác trong ng√†y n√†y'
      });
    }

    // Ki·ªÉm tra timeslot c√≥ kh·ªõp kh√¥ng - t√¨m timeslot r·∫£nh trong khung gi·ªù hi·ªán t·∫°i
    const timeslot = await Timeslot.findOne({
      doctorScheduleId: doctorSchedule._id,
      startTime: appointment.timeslotId.startTime,
      endTime: appointment.timeslotId.endTime,
      status: 'Available'
    });

    if (!timeslot) {
      return res.status(400).json({
        success: false,
        message: 'B√°c sƒ© m·ªõi kh√¥ng c√≥ khung gi·ªù r·∫£nh trong th·ªùi gian n√†y. Vui l√≤ng ch·ªçn b√°c sƒ© kh√°c ho·∫∑c ƒë·ªïi l·ªãch h·∫πn.'
      });
    }

    // Ki·ªÉm tra xem c√≥ appointment n√†o kh√°c ƒë√£ ƒë·∫∑t timeslot n√†y ch∆∞a
    const existingAppointment = await Appointment.findOne({
      timeslotId: timeslot._id,
      status: { $nin: ['Cancelled', 'Expired'] },
      _id: { $ne: appointmentId }
    });

    if (existingAppointment) {
      return res.status(409).json({
        success: false,
        message: 'Khung gi·ªù n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t b·ªüi b·ªánh nh√¢n kh√°c'
      });
    }

    // C·∫≠p nh·∫≠t appointment v·ªõi b√°c sƒ© m·ªõi
    appointment.doctorUserId = newDoctorUserId;
    appointment.timeslotId = timeslot._id;
    appointment.status = 'Pending'; // Reset v·ªÅ ch·ªù duy·ªát
    await appointment.save();

    // Kh√¥ng g·ª≠i email th√¥ng b√°o theo y√™u c·∫ßu

    console.log('‚úÖ Change doctor request successful');
    return res.status(200).json({
      success: true,
      message: 'Y√™u c·∫ßu ƒë·ªïi b√°c sƒ© ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng',
      data: {
        appointmentId: appointment._id,
        newDoctorUserId: newDoctorUserId,
        newDoctorName: newDoctor.fullName,
        status: 'Pending'
      }
    });

  } catch (error) {
    console.error('‚ùå Error in requestChangeDoctor:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server khi x·ª≠ l√Ω y√™u c·∫ßu ƒë·ªïi b√°c sƒ©',
      error: error.message
    });
  }
};

module.exports = {
  createConsultationAppointment,
  reviewAppointment,
  getPendingAppointments,
  getAllAppointments,
  getMyAppointments,
  updateAppointmentStatus,
  cancelAppointment,
  confirmCancelAppointment,
  getAppointmentDetails,
  markAsRefunded,
  requestReschedule,
  requestChangeDoctor
};