const axios = require('axios');
const { sepayConfig } = require('../config/sepayConfig');

class SepayService {
  
  /**
   * T·∫°o n·ªôi dung chuy·ªÉn kho·∫£n (content) ƒë·ªÉ tracking
   * Format: APPOINTMENT_{appointmentId}
   */
  generateTransferContent(appointmentId) {
    // Chuy·ªÉn ObjectId th√†nh string ng·∫Øn (8 k√Ω t·ª± cu·ªëi)
    const shortId = appointmentId.toString().slice(-8).toUpperCase();
    return `APPOINTMENT ${shortId}`;
  }

  /**
   * T·∫°o QR Code thanh to√°n
   * 
   * Mode 1: D√πng VietQR (mi·ªÖn ph√≠, kh√¥ng c·∫ßn API token)
   * Mode 2: D√πng Sepay Create Transaction API (dynamic QR, c·∫ßn API token)
   */
  async generateQRCode(paymentData) {
    try {
      const { appointmentId, amount, customerName } = paymentData;

      // T·∫°o n·ªôi dung chuy·ªÉn kho·∫£n
      const content = this.generateTransferContent(appointmentId);
      
      // DEBUG: Log to√†n b·ªô paymentData ƒë·ªÉ xem
      console.log('üîç DEBUG - paymentData:', JSON.stringify(paymentData, null, 2));
      console.log('üîç DEBUG - customerName t·ª´ paymentData:', customerName);
      console.log('üîç DEBUG - sepayConfig.accountName t·ª´ env:', sepayConfig.accountName);
      console.log('üîç DEBUG - process.env.SEPAY_ACCOUNT_NAME:', process.env.SEPAY_ACCOUNT_NAME);
      
      // T√™n hi·ªÉn th·ªã tr√™n QR: LU√îN D√ôNG accountName t·ª´ config (.env)
      // KH√îNG d√πng customerName v√¨ n√≥ c√≥ th·ªÉ b·ªã sai
      const displayName = sepayConfig.accountName;
      
      console.log('üí≥ T·∫°o QR Code:');
      console.log('   - S·ªë t√†i kho·∫£n:', sepayConfig.accountNumber);
      console.log('   - T√™n hi·ªÉn th·ªã (FINAL):', displayName);
      console.log('   - Ng√¢n h√†ng:', sepayConfig.bankCode);
      console.log('   - S·ªë ti·ªÅn:', amount, 'VND');
      console.log('   - N·ªôi dung:', content);

      // N·∫øu c√≥ API Token ‚Üí d√πng Sepay Payment Gateway
      if (sepayConfig.apiToken && sepayConfig.apiToken !== '') {
        console.log('üîë C√≥ API Token ‚Üí D√πng Sepay Payment Gateway');
        return await this.generateSepayQRCode({
          appointmentId,
          amount,
          content,
          customerName: displayName
        });
      }

      // N·∫øu kh√¥ng c√≥ API Token ‚Üí d√πng VietQR (mi·ªÖn ph√≠)
      console.log('üÜì Kh√¥ng c√≥ API Token ‚Üí D√πng VietQR (mi·ªÖn ph√≠)');
      const qrUrl = this.generateVietQRUrl({
        accountNumber: sepayConfig.accountNumber,
        accountName: displayName,
        bankCode: sepayConfig.bankCode,
        amount: amount,
        content: content
      });

      console.log('‚úÖ QR URL:', qrUrl);

      return {
        qrUrl,
        content,
        accountNumber: sepayConfig.accountNumber,
        accountName: displayName,
        bankCode: sepayConfig.bankCode,
        amount
      };

    } catch (error) {
      console.error('‚ùå L·ªói t·∫°o QR Code:', error.message);
      throw new Error('Kh√¥ng th·ªÉ t·∫°o m√£ QR thanh to√°n');
    }
  }

  /**
   * T·∫°o QR Code ƒë·ªông qua Sepay Payment Gateway API
   * (D√†nh cho ng∆∞·ªùi ch·ªçn "S·ª≠ d·ª•ng C·ªïng thanh to√°n")
   */
  async generateSepayQRCode(data) {
    try {
      const { appointmentId, amount, content, customerName } = data;

      console.log('üîÑ ƒêang g·ªçi Sepay Payment Gateway API...');

      // G·ªçi Sepay Create Payment Link API
      // Docs: https://docs.sepay.vn/
      const response = await axios.post(
        `${sepayConfig.apiBaseUrl}/create-payment`,
        {
          account_number: sepayConfig.accountNumber,
          amount: amount,
          content: content,
          payer_name: customerName || 'Khach hang',
          bank_code: sepayConfig.bankCode,
          callback_url: sepayConfig.webhookUrl || null
        },
        {
          headers: {
            'Authorization': `Bearer ${sepayConfig.apiToken}`,
            'Content-Type': 'application/json'
          },
          timeout: 10000 // 10 seconds timeout
        }
      );

      console.log('üì° Sepay API Response:', response.data);

      // Check response format
      if (response.data && response.data.status === 200) {
        const data = response.data.data;
        
        console.log('‚úÖ Sepay Payment Link created');
        console.log('   - Transaction ID:', data.transaction_id || data.id);
        console.log('   - QR URL:', data.qr_url || data.qrcode);

        return {
          qrUrl: data.qr_url || data.qrcode || data.qr_code,
          content: content,
          accountNumber: sepayConfig.accountNumber,
          accountName: customerName || sepayConfig.accountName,
          bankCode: sepayConfig.bankCode,
          amount: amount,
          transactionId: data.transaction_id || data.id,
          expiresAt: data.expires_at || data.expired_at || null,
          paymentUrl: data.payment_url || data.pay_url || null
        };
      }

      // N·∫øu response kh√¥ng ƒë√∫ng format mong ƒë·ª£i
      throw new Error(`Sepay API error: ${response.data?.message || 'Unknown error'}`);

    } catch (error) {
      console.error('‚ùå L·ªói g·ªçi Sepay Payment Gateway API:');
      
      if (error.response) {
        // API tr·∫£ v·ªÅ error
        console.error('   - Status:', error.response.status);
        console.error('   - Data:', error.response.data);
      } else if (error.request) {
        // Kh√¥ng nh·∫≠n ƒë∆∞·ª£c response
        console.error('   - No response from Sepay API');
      } else {
        console.error('   - Error:', error.message);
      }
      
      // Fallback v·ªÅ VietQR n·∫øu Sepay API l·ªói
      console.log('‚ö†Ô∏è  Fallback v·ªÅ VietQR (mi·ªÖn ph√≠)...');
      return {
        qrUrl: this.generateVietQRUrl({
          accountNumber: sepayConfig.accountNumber,
          accountName: data.customerName || sepayConfig.accountName,
          bankCode: sepayConfig.bankCode,
          amount: data.amount,
          content: data.content
        }),
        content: data.content,
        accountNumber: sepayConfig.accountNumber,
        accountName: data.customerName || sepayConfig.accountName,
        bankCode: sepayConfig.bankCode,
        amount: data.amount,
        fallback: true
      };
    }
  }

  /**
   * T·∫°o URL QR Code s·ª≠ d·ª•ng VietQR API
   * API mi·ªÖn ph√≠, kh√¥ng c·∫ßn ƒëƒÉng k√Ω
   */
  generateVietQRUrl(data) {
    const { accountNumber, accountName, bankCode, amount, content } = data;
    
    // Encode n·ªôi dung ƒë·ªÉ URL-safe
    const encodedContent = encodeURIComponent(content);
    const encodedAccountName = encodeURIComponent(accountName);
    
    // VietQR API format
    // https://img.vietqr.io/image/{BANK_CODE}-{ACCOUNT_NUMBER}-{TEMPLATE}.png?amount={AMOUNT}&addInfo={CONTENT}&accountName={NAME}
    const qrUrl = `https://img.vietqr.io/image/${bankCode}-${accountNumber}-${sepayConfig.qrTemplate}.png?amount=${amount}&addInfo=${encodedContent}&accountName=${encodedAccountName}`;
    
    return qrUrl;
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch t·ª´ Sepay
   * (N·∫øu c√≥ API Token t·ª´ Sepay)
   */
  async checkTransactionStatus(content) {
    try {
      if (!sepayConfig.apiToken) {
        console.warn('‚ö†Ô∏è  Ch∆∞a c·∫•u h√¨nh SEPAY_API_TOKEN, kh√¥ng th·ªÉ t·ª± ƒë·ªông check giao d·ªãch');
        return null;
      }

      console.log('üîç ƒêang check giao d·ªãch v·ªõi content:', content);
      console.log('üîç Account number:', sepayConfig.accountNumber);

      // CH·ªà D√ôNG 1 ENDPOINT CH√çNH
      const response = await axios.get(`${sepayConfig.apiBaseUrl}/transactions`, {
        headers: {
          'Authorization': `Bearer ${sepayConfig.apiToken}`,
          'Content-Type': 'application/json'
        },
        params: {
          account_number: sepayConfig.accountNumber,
          limit: 50
        },
        timeout: 10000
      });

      console.log('üì° Sepay API Response:', response.data);

      // Parse response
      let transactions = response.data?.transactions || 
                       response.data?.data?.transactions ||
                       response.data?.data || 
                       response.data?.records ||
                       response.data;
      
      if (!Array.isArray(transactions)) {
        console.log('‚ö†Ô∏è  Response kh√¥ng ph·∫£i array');
        return { found: false };
      }

      console.log(`üìä T√¨m th·∫•y ${transactions.length} giao d·ªãch t·ª´ Sepay`);

      // T√¨m giao d·ªãch kh·ªõp
      const transaction = transactions.find(tx => {
        const txContent = tx.transaction_content || tx.content || tx.description || tx.note || '';
        return txContent && txContent.includes(content);
      });

      if (transaction) {
        console.log('‚úÖ T√åM TH·∫§Y GIAO D·ªäCH KH·ªöP!');
        console.log('   - S·ªë ti·ªÅn:', transaction.amount_in || transaction.amount);
        console.log('   - N·ªôi dung:', transaction.transaction_content || transaction.content);
        return {
          found: true,
          amount: transaction.amount_in || transaction.amount || transaction.credit || 0,
          transactionDate: transaction.transaction_date || transaction.date || transaction.created_at || transaction.time,
          bankAccount: transaction.bank_account || transaction.account_name || transaction.sender,
          content: transaction.transaction_content || transaction.content || transaction.description
        };
      }

      console.log('‚è≥ Ch∆∞a th·∫•y giao d·ªãch kh·ªõp');
      return { found: false };

    } catch (error) {
      console.error('‚ùå L·ªói check Sepay API:');
      if (error.response) {
        console.error('   - Status:', error.response.status);
        console.error('   - Message:', error.response.data?.message || error.response.statusText);
      } else {
        console.error('   - Error:', error.message);
      }
      return null;
    }
  }

  /**
   * X√°c th·ª±c webhook t·ª´ Sepay (n·∫øu c√≥)
   */
  validateWebhook(signature, payload) {
    // TODO: Implement webhook signature validation
    // Sepay s·∫Ω g·ª≠i signature ƒë·ªÉ verify request
    return true;
  }

  /**
   * Parse webhook data t·ª´ Sepay
   */
  parseWebhookData(data) {
    try {
      return {
        transactionId: data.id,
        gatewayTransactionId: data.gateway_transaction_id,
        accountNumber: data.account_number,
        amount: data.amount_in,
        content: data.transaction_content,
        transactionDate: data.transaction_date,
        referenceNumber: data.reference_number,
        bankAccount: data.bank_account
      };
    } catch (error) {
      console.error('‚ùå L·ªói parse webhook data:', error);
      throw new Error('Invalid webhook data');
    }
  }

  /**
   * L·∫•y th√¥ng tin ng√¢n h√†ng
   */
  getBankInfo() {
    return {
      accountNumber: sepayConfig.accountNumber,
      accountName: sepayConfig.accountName,
      bankCode: sepayConfig.bankCode,
      bankName: this.getBankName(sepayConfig.bankCode)
    };
  }

  /**
   * Get bank name from bank code
   */
  getBankName(bankCode) {
    const bankNames = {
      MB: 'MBBank - Ng√¢n h√†ng Qu√¢n ƒê·ªôi',
      VCB: 'Vietcombank - Ng√¢n h√†ng Ngo·∫°i Th∆∞∆°ng',
      TCB: 'Techcombank - Ng√¢n h√†ng K·ªπ Th∆∞∆°ng',
      ACB: 'ACB - Ng√¢n h√†ng √Å Ch√¢u',
      VPB: 'VPBank - Ng√¢n h√†ng Vi·ªát Nam Th·ªãnh V∆∞·ª£ng',
      TPB: 'TPBank - Ng√¢n h√†ng Ti√™n Phong',
      STB: 'Sacombank - Ng√¢n h√†ng TMCP S√†i G√≤n Th∆∞∆°ng T√≠n',
      VIB: 'VIB - Ng√¢n h√†ng Qu·ªëc T·∫ø',
      SHB: 'SHB - Ng√¢n h√†ng S√†i G√≤n - H√† N·ªôi',
      BIDV: 'BIDV - Ng√¢n h√†ng ƒê·∫ßu T∆∞ v√† Ph√°t Tri·ªÉn Vi·ªát Nam'
    };
    
    return bankNames[bankCode] || bankCode;
  }
}

module.exports = new SepayService();

