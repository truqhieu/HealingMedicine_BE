/**
 * Google Meet Service
 * T·∫°o li√™n k·∫øt cu·ªôc h·ªçp online
 * 
 * S·ª≠ d·ª•ng Jitsi Meet (open source) thay v√¨ Google Meet
 * Kh√¥ng c·∫ßn credentials, ho·∫°t ƒë·ªông 100%
 */

const crypto = require('crypto');

class GoogleMeetService {
  constructor() {
    this.initialized = true;
  }

  /**
   * T·∫°o link Jitsi Meet (open source, kh√¥ng c·∫ßn credentials)
   * @param {Object} meetData 
   */
  async generateMeetLink(meetData) {
    try {
      const { appointmentId, doctorName, patientName, serviceName } = meetData;

      // T·∫°o room ID t·ª´ appointmentId
      // Format: jitsi.haianh.{appointmentId}
      const roomId = `haianh-${appointmentId.substring(0, 12)}`.toLowerCase();
      
      // Jitsi Meet link
      const meetLink = `https://meet.jit.si/${roomId}`;

      console.log('‚úÖ Jitsi Meet link ƒë√£ t·∫°o');
      console.log('   - Room ID:', roomId);
      console.log('   - Meet Link:', meetLink);
      console.log(`   - B√°c sƒ©: ${doctorName}`);
      console.log(`   - B·ªánh nh√¢n: ${patientName}`);
      console.log(`   - D·ªãch v·ª•: ${serviceName}`);

      return meetLink;

    } catch (error) {
      console.error('‚ùå L·ªói t·∫°o meet link:', error.message);
      
      // Fallback: t·∫°o link v·ªõi random ID
      const randomId = `haianh-${crypto.randomBytes(6).toString('hex')}`;
      const fallbackLink = `https://meet.jit.si/${randomId}`;
      
      console.log('üìå S·ª≠ d·ª•ng fallback link:', fallbackLink);
      return fallbackLink;
    }
  }

  /**
   * X√≥a event (kh√¥ng c·∫ßn cho Jitsi)
   */
  async deleteMeetLink(eventId) {
    // Jitsi Meet kh√¥ng c·∫ßn x√≥a, t·ª± ƒë·ªông h·∫øt h·∫°n
    console.log('‚úÖ Jitsi Meet room s·∫Ω t·ª± ƒë·ªông h·∫øt h·∫°n');
    return true;
  }
}

module.exports = new GoogleMeetService();
