/**
 * Google Meet Service
 * T·∫°o li√™n k·∫øt Google Meet cho c√°c cu·ªôc h·∫πn t∆∞ v·∫•n online
 * 
 * H∆∞·ªõng d·∫´n setup:
 * 1. Truy c·∫≠p: https://console.cloud.google.com
 * 2. T·∫°o project m·ªõi ho·∫∑c s·ª≠ d·ª•ng project hi·ªán t·∫°i
 * 3. B·∫≠t Google Calendar API
 * 4. T·∫°o Service Account credentials (JSON key)
 * 5. Chia s·∫ª Google Calendar ƒë√≥ cho service account email
 * 6. L∆∞u file JSON v√†o config/google-credentials.json
 * 7. Th√™m GOOGLE_CALENDAR_ID v√†o .env
 */

const { google } = require('googleapis');
const path = require('path');
const fs = require('fs');

class GoogleMeetService {
  constructor() {
    this.initialized = false;
    this.calendar = null;
    this.calendarId = process.env.GOOGLE_CALENDAR_ID || 'primary';
    this.init();
  }

  /**
   * Kh·ªüi t·∫°o Google Calendar API
   */
  init() {
    try {
      // ƒê∆∞·ªùng d·∫´n ƒë·∫øn file credentials
      const credentialsPath = path.join(__dirname, '../config/google-credentials.json');
      
      // Ki·ªÉm tra xem file credentials c√≥ t·ªìn t·∫°i kh√¥ng
      if (!fs.existsSync(credentialsPath)) {
        console.warn('‚ö†Ô∏è File google-credentials.json kh√¥ng t·ªìn t·∫°i.');
        console.warn('üìù H∆∞·ªõng d·∫´n setup Google Calendar API:');
        console.warn('   1. Truy c·∫≠p https://console.cloud.google.com');
        console.warn('   2. T·∫°o Service Account v√† download JSON key');
        console.warn('   3. L∆∞u v√†o: config/google-credentials.json');
        console.warn('   4. Th√™m GOOGLE_CALENDAR_ID v√†o .env');
        return;
      }

      const credentials = require('../config/google-credentials.json');
      
      // T·∫°o JWT client
      const auth = new google.auth.GoogleAuth({
        credentials,
        scopes: [
          'https://www.googleapis.com/auth/calendar',
          'https://www.googleapis.com/auth/calendar.events'
        ]
      });

      this.calendar = google.calendar({ version: 'v3', auth });
      this.initialized = true;
      console.log('‚úÖ Google Calendar API initialized');
    } catch (error) {
      console.error('‚ö†Ô∏è L·ªói kh·ªüi t·∫°o Google Calendar API:', error.message);
    }
  }

  async generateMeetLink(meetData) {
    try {
      if (!this.initialized) {
        console.warn('‚ö†Ô∏è Google Calendar API ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
        
        // Tr·∫£ v·ªÅ link tƒ©nh n·∫øu kh√¥ng c√≥ credentials
        // C√≥ th·ªÉ d√πng zoom ho·∫∑c t·∫°o link custom c·ªßa ri√™ng b·∫°n
        const staticMeetLink = `${process.env.APP_URL}/appointment/${meetData.appointmentId}/meet`;
        console.log('üìå S·ª≠ d·ª•ng link tƒ©nh thay th·∫ø:', staticMeetLink);
        return staticMeetLink;
      }

      const { appointmentId, doctorName, patientName, startTime, endTime, serviceName } = meetData;

      // T·∫°o event trong Google Calendar
      const event = {
        summary: `T∆∞ v·∫•n - ${serviceName}`,
        description: `
B√°c sƒ©: ${doctorName}
B·ªánh nh√¢n: ${patientName}
D·ªãch v·ª•: ${serviceName}
Appointment ID: ${appointmentId}

ƒê√¢y l√† cu·ªôc t∆∞ v·∫•n online th√¥ng qua Google Meet.
        `.trim(),
        start: {
          dateTime: new Date(startTime).toISOString(),
          timeZone: 'Asia/Ho_Chi_Minh'
        },
        end: {
          dateTime: new Date(endTime).toISOString(),
          timeZone: 'Asia/Ho_Chi_Minh'
        },
        conferenceData: {
          createRequest: {
            requestId: `appointment-${appointmentId}`,
            conferenceSolutionKey: {
              key: 'hangoutsMeet'
            }
          }
        },
        attendees: [
          {
            email: process.env.GOOGLE_CALENDAR_EMAIL || 'noreply@haianteeth.com',
            organizer: true,
            responseStatus: 'accepted'
          }
        ],
        transparency: 'opaque'
      };

      // T·∫°o event v·ªõi Google Meet
      const response = await this.calendar.events.insert({
        calendarId: this.calendarId,
        resource: event,
        conferenceDataVersion: 1
      });

      const meetLink = response.data.conferenceData?.entryPoints?.[0]?.uri;
      
      if (meetLink) {
        console.log('‚úÖ T·∫°o Google Meet link th√†nh c√¥ng');
        console.log('   - Event ID:', response.data.id);
        console.log('   - Meet Link:', meetLink);
        return meetLink;
      } else {
        console.warn('‚ö†Ô∏è Google Meet link kh√¥ng ƒë∆∞·ª£c t·∫°o, s·ª≠ d·ª•ng link tƒ©nh');
        const staticMeetLink = `${process.env.APP_URL}/appointment/${appointmentId}/meet`;
        return staticMeetLink;
      }

    } catch (error) {
      console.error('‚ùå L·ªói t·∫°o Google Meet link:', error.message);
      
      // Fallback: tr·∫£ v·ªÅ link tƒ©nh
      const staticMeetLink = `${process.env.APP_URL}/appointment/${meetData.appointmentId}/meet`;
      console.log('üìå S·ª≠ d·ª•ng link tƒ©nh thay th·∫ø:', staticMeetLink);
      return staticMeetLink;
    }
  }

  /**
   * X√≥a event Google Meet n·∫øu c·∫ßn (khi h·ªßy appointment)
   */
  async deleteMeetLink(eventId) {
    try {
      if (!this.initialized || !eventId) {
        return true;
      }

      await this.calendar.events.delete({
        calendarId: this.calendarId,
        eventId: eventId
      });

      console.log('‚úÖ ƒê√£ x√≥a Google Meet event:', eventId);
      return true;
    } catch (error) {
      console.error('‚ùå L·ªói x√≥a Google Meet link:', error.message);
      return false;
    }
  }
}

module.exports = new GoogleMeetService();
