const DoctorSchedule = require('../models/doctorSchedule.model');
const Appointment = require('../models/appointment.model');
const Service = require('../models/service.model');
const User = require('../models/user.model');
const ScheduleHelper = require('../utils/scheduleHelper');

class AvailableSlotService {

  /**
   * L·∫•y c√°c khung gi·ªù available d·ª±a tr√™n:
   * - DoctorSchedule (khung gi·ªù l√†m vi·ªác)
   * - Service (th·ªùi l∆∞·ª£ng d·ªãch v·ª•)
   * - Appointments ƒë√£ book (ƒë·ªÉ lo·∫°i tr·ª´)
   * 
   * @param {Object} params
   * @param {ObjectId} params.doctorUserId - ID c·ªßa User c√≥ role="Doctor"
   * @param {ObjectId} params.serviceId - ID d·ªãch v·ª•
   * @param {Date} params.date - Ng√†y mu·ªën ƒë·∫∑t l·ªãch
   * @param {Number} params.breakAfterMinutes - Th·ªùi gian ngh·ªâ gi·ªØa c√°c ca (m·∫∑c ƒë·ªãnh 10 ph√∫t)
   */
  async getAvailableSlots({ doctorUserId, serviceId, date, breakAfterMinutes = 10 }) {
    
    // 1. Validate input
    if (!doctorUserId || !serviceId || !date) {
      throw new Error('Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß doctorUserId, serviceId v√† date');
    }

    // 2. Ki·ªÉm tra doctor c√≥ t·ªìn t·∫°i kh√¥ng (t·ª´ b·∫£ng User v·ªõi role="Doctor")
    const doctor = await User.findById(doctorUserId);
    if (!doctor) {
      throw new Error('Kh√¥ng t√¨m th·∫•y b√°c sƒ©');
    }

    if (doctor.role !== 'Doctor') {
      throw new Error('User n√†y kh√¥ng ph·∫£i l√† b√°c sƒ©');
    }

    if (doctor.status !== 'Active') {
      throw new Error('B√°c sƒ© n√†y hi·ªán kh√¥ng ho·∫°t ƒë·ªông');
    }

    // 3. L·∫•y th√¥ng tin d·ªãch v·ª•
    const service = await Service.findById(serviceId);
    if (!service) {
      throw new Error('Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•');
    }

    if (service.status !== 'Active') {
      throw new Error('D·ªãch v·ª• n√†y hi·ªán kh√¥ng ho·∫°t ƒë·ªông');
    }

    const serviceDuration = service.durationMinutes;

    // 4. L·∫•y DoctorSchedule c·ªßa ng√†y ƒë√≥
    const searchDate = new Date(date);
    searchDate.setHours(0, 0, 0, 0);

    const schedules = await DoctorSchedule.find({
      doctorUserId,
      date: searchDate,
      status: 'Available'
    }).sort({ startTime: 1 });

    if (schedules.length === 0) {
      return {
        date: searchDate,
        doctorUserId,
        serviceId,
        serviceName: service.serviceName,
        serviceDuration,
        availableSlots: [],
        message: 'B√°c sƒ© kh√¥ng c√≥ l·ªãch l√†m vi·ªác trong ng√†y n√†y'
      };
    }

    // 5. L·∫•y t·∫•t c·∫£ appointments ƒë√£ book c·ªßa b√°c sƒ© trong ng√†y ƒë√≥
    const startOfDay = new Date(searchDate);
    startOfDay.setHours(0, 0, 0, 0);
    
    const endOfDay = new Date(searchDate);
    endOfDay.setHours(23, 59, 59, 999);

    // ‚≠ê FIXED: Query appointments c√≥ timeslot r·∫£nh trong ng√†y (kh√¥ng d√πng createdAt)
    const bookedAppointments = await Appointment.find({
      doctorUserId,
      status: { $in: ['PendingPayment', 'Pending', 'Approved', 'CheckedIn'] },
      timeslotId: { $exists: true }
    })
    .populate({
      path: 'timeslotId',
      select: 'startTime endTime',
      match: {
        startTime: { $gte: startOfDay, $lte: endOfDay }
      }
    })
    .populate('serviceId', 'durationMinutes')
    .sort({ 'timeslotId.startTime': 1 });

    // Filter out appointments where timeslotId couldn't match (populate returned null)
    const validAppointments = bookedAppointments.filter(apt => apt.timeslotId !== null);

    // ‚≠ê TH√äM: L·∫•y t·∫•t c·∫£ timeslots ƒë√£ ƒë∆∞·ª£c Reserved ho·∫∑c Booked trong ng√†y
    // ƒê·ªÉ tr√°nh conflict ngay c·∫£ khi ch∆∞a confirm appointment
    const Timeslot = require('../models/timeslot.model');
    const reservedTimeslots = await Timeslot.find({
      doctorUserId,
      status: { $in: ['Reserved', 'Booked'] },
      startTime: { $gte: startOfDay, $lte: endOfDay }
    }).sort({ startTime: 1 });

    // 6. T·∫°o danh s√°ch kho·∫£ng th·ªùi gian ƒë√£ b·∫≠n
    const busySlots = validAppointments.map(apt => {
      if (apt.timeslotId) {
        return {
          start: new Date(apt.timeslotId.startTime),
          end: new Date(apt.timeslotId.endTime).getTime() + breakAfterMinutes * 60000 // + break time
        };
      }
      return null;
    }).filter(slot => slot !== null);

    // ‚≠ê TH√äM: Th√™m Reserved/Booked timeslots v√†o busySlots
    const reservedBusySlots = reservedTimeslots.map(ts => ({
      start: new Date(ts.startTime),
      end: new Date(ts.endTime).getTime() + breakAfterMinutes * 60000
    }));
    
    busySlots.push(...reservedBusySlots);

    console.log('üìÖ T√≠nh to√°n available slots:');
    console.log('   - B√°c sƒ©:', doctorUserId);
    console.log('   - D·ªãch v·ª•:', service.serviceName, `(${serviceDuration} ph√∫t)`);
    console.log('   - Ng√†y:', searchDate.toISOString().split('T')[0]);
    console.log('   - S·ªë appointments ƒë√£ book:', validAppointments.length);
    console.log('   - S·ªë timeslots Reserved/Booked:', reservedTimeslots.length);
    console.log('üî¥ DEBUG busySlots:', busySlots.map(b => ({
      start: new Date(b.start).toISOString(),
      end: new Date(b.end).toISOString()
    })));

    // 7. T·∫°o danh s√°ch slots available
    const allAvailableSlots = [];

    for (const schedule of schedules) {
      const scheduleStart = new Date(schedule.startTime);
      const scheduleEnd = new Date(schedule.endTime);

      console.log(`\n   üïê Schedule ${schedule.shift}: ${ScheduleHelper.formatTimeSlot(scheduleStart, scheduleEnd)}`);

      // T·∫°o c√°c slot c√≥ th·ªÉ trong schedule n√†y
      const slots = this._generateSlotsInRange(
        scheduleStart,
        scheduleEnd,
        serviceDuration,
        breakAfterMinutes,
        busySlots
      );

      allAvailableSlots.push(...slots);
    }

    console.log(`\n   ‚úÖ T·ªïng s·ªë slots available: ${allAvailableSlots.length}`);

    return {
      date: searchDate,
      doctorUserId,
      serviceId,
      serviceName: service.serviceName,
      serviceDuration,
      breakAfterMinutes,
      availableSlots: allAvailableSlots,
      totalSlots: allAvailableSlots.length,
      // ‚≠ê Th√™m scheduleId t·ª´ DoctorSchedule ƒë·∫ßu ti√™n (c√≥ th·ªÉ c√≥ multiple schedules)
      scheduleId: schedules.length > 0 ? schedules[0]._id : null
    };
  }

  /**
   * T·∫°o danh s√°ch slots trong m·ªôt kho·∫£ng th·ªùi gian, lo·∫°i tr·ª´ busy slots
   * @private
   */
  _generateSlotsInRange(startTime, endTime, duration, breakTime, busySlots) {
    const slots = [];
    let currentStart = new Date(startTime);
    const end = new Date(endTime);

    while (currentStart < end) {
      // T√≠nh end time c·ªßa slot n√†y
      const currentEnd = new Date(currentStart.getTime() + duration * 60000);

      // Ki·ªÉm tra slot c√≥ v∆∞·ª£t qu√° th·ªùi gian l√†m vi·ªác kh√¥ng
      if (currentEnd > end) {
        break;
      }

      // Ki·ªÉm tra slot c√≥ tr√πng v·ªõi busy slots kh√¥ng
      const isConflict = busySlots.some(busy => {
        return (
          (currentStart >= busy.start && currentStart < busy.end) ||
          (currentEnd > busy.start && currentEnd <= busy.end) ||
          (currentStart <= busy.start && currentEnd >= busy.end)
        );
      });

      if (!isConflict) {
        slots.push({
          startTime: new Date(currentStart),
          endTime: new Date(currentEnd),
          displayTime: ScheduleHelper.formatTimeSlot(currentStart, currentEnd)
        });
      }

      // T√≠nh th·ªùi gian b·∫Øt ƒë·∫ßu slot ti·∫øp theo
      currentStart = new Date(currentEnd.getTime() + breakTime * 60000);
    }

    return slots;
  }

  /**
   * L·∫•y t·∫•t c·∫£ b√°c sƒ© ACTIVE c√≥ khung gi·ªù r·∫£nh v√†o ng√†y v√† d·ªãch v·ª• c·ª• th·ªÉ
 */
  async getAvailableDoctors({ serviceId, date, breakAfterMinutes = 10 }) {
    // 1. Validate input
    if (!serviceId || !date) {
      throw new Error('Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß serviceId v√† date');
    }

    // 2. L·∫•y th√¥ng tin d·ªãch v·ª•
    const service = await Service.findById(serviceId);
    if (!service) {
      throw new Error('Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•');
    }

    if (service.status !== 'Active') {
      throw new Error('D·ªãch v·ª• n√†y hi·ªán kh√¥ng ho·∫°t ƒë·ªông');
    }

    const serviceDuration = service.durationMinutes;

    // 3. L·∫•y t·∫•t c·∫£ b√°c sƒ© ACTIVE
    const doctors = await User.find({
      role: 'Doctor',
      status: 'Active'
    }).select('_id fullName email phoneNumber');

    // 4. Chu·∫©n b·ªã ng√†y t√¨m ki·∫øm
    const searchDate = new Date(date);
    searchDate.setHours(0, 0, 0, 0);

    if (doctors.length === 0) {
      return {
        date: searchDate,
        serviceId,
        serviceName: service.serviceName,
        serviceDuration,
        availableDoctors: [],
        totalDoctors: 0,
        message: 'Kh√¥ng c√≥ b√°c sƒ© n√†o ho·∫°t ƒë·ªông'
      };
    }

    // 5. Duy·ªát qua t·ª´ng b√°c sƒ© ƒë·ªÉ ki·ªÉm tra c√≥ khung gi·ªù r·∫£nh kh√¥ng
    const availableDoctors = [];

    for (const doctor of doctors) {
      try {
        // L·∫•y available slots cho b√°c sƒ© n√†y
        const slotsResult = await this.getAvailableSlots({
          doctorUserId: doctor._id,
          serviceId,
          date: searchDate,
          breakAfterMinutes
        });

        // N·∫øu b√°c sƒ© n√†y c√≥ khung gi·ªù r·∫£nh
        if (slotsResult.availableSlots && slotsResult.availableSlots.length > 0) {
          availableDoctors.push({
            doctorId: doctor._id,
            doctorScheduleId: slotsResult.scheduleId, 
            doctorName: doctor.fullName,
            email: doctor.email,
            phoneNumber: doctor.phoneNumber,
            availableSlots: slotsResult.availableSlots,
            totalSlots: slotsResult.availableSlots.length,
            totalSlotsToday: slotsResult.availableSlots.length
          });
        }
      } catch (error) {
        // N·∫øu c√≥ l·ªói v·ªõi b√°c sƒ© n√†y, b·ªè qua v√† ti·∫øp t·ª•c v·ªõi b√°c sƒ© kh√°c
        console.warn(`‚ö†Ô∏è  L·ªói l·∫•y available slots cho b√°c sƒ© ${doctor._id}:`, error.message);
      }
    }

    console.log('‚úÖ T√¨m ki·∫øm b√°c sƒ© c√≥ khung gi·ªù r·∫£nh:');
    console.log(`   - Ng√†y: ${searchDate.toISOString().split('T')[0]}`);
    console.log(`   - D·ªãch v·ª•: ${service.serviceName}`);
    console.log(`   - T·ªïng b√°c sƒ© ACTIVE: ${doctors.length}`);
    console.log(`   - B√°c sƒ© c√≥ khung gi·ªù r·∫£nh: ${availableDoctors.length}`);

    return {
      date: searchDate,
      serviceId,
      serviceName: service.serviceName,
      serviceDuration,
      breakAfterMinutes,
      availableDoctors: availableDoctors,
      totalDoctors: availableDoctors.length,
      totalDoctorsActive: doctors.length
    };
  }

  /**
   * L·∫•y b√°c sƒ© c√≥ khung gi·ªù r·∫£nh t·∫°i m·ªôt khung gi·ªù c·ª• th·ªÉ
   * (S·ª≠ d·ª•ng khi FE ch·ªçn m·ªôt khung gi·ªù c·ª• th·ªÉ thay v√¨ xem t·∫•t c·∫£)
   * 
   * @param {Object} params
   * @param {ObjectId} params.serviceId - ID d·ªãch v·ª•
   * @param {Date} params.date - Ng√†y mu·ªën ƒë·∫∑t l·ªãch
   * @param {Date} params.startTime - Gi·ªù b·∫Øt ƒë·∫ßu khung gi·ªù mu·ªën ch·ªçn
   * @param {Date} params.endTime - Gi·ªù k·∫øt th√∫c khung gi·ªù mu·ªën ch·ªçn
   * @returns {Object} Danh s√°ch b√°c sƒ© c√≥ khung gi·ªù kh·∫£ d·ª•ng
   */
  async getAvailableDoctorsForTimeSlot({ serviceId, date, startTime, endTime }) {
    // 1. Validate input
    if (!serviceId || !date || !startTime || !endTime) {
      throw new Error('Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß serviceId, date, startTime v√† endTime');
    }

    // 2. L·∫•y th√¥ng tin d·ªãch v·ª•
    const service = await Service.findById(serviceId);
    if (!service) {
      throw new Error('Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•');
    }

    if (service.status !== 'Active') {
      throw new Error('D·ªãch v·ª• n√†y hi·ªán kh√¥ng ho·∫°t ƒë·ªông');
    }

    // 3. L·∫•y t·∫•t c·∫£ b√°c sƒ© ACTIVE
    const doctors = await User.find({
      role: 'Doctor',
      status: 'Active'
    }).select('_id fullName email phoneNumber');

    if (doctors.length === 0) {
      return {
        date: new Date(date),
        serviceId,
        serviceName: service.serviceName,
        requestedTime: {
          startTime: new Date(startTime),
          endTime: new Date(endTime)
        },
        availableDoctors: [],
        totalDoctors: 0,
        message: 'Kh√¥ng c√≥ b√°c sƒ© n√†o ho·∫°t ƒë·ªông'
      };
    }

    // 4. Chu·∫©n b·ªã ng√†y t√¨m ki·∫øm
    const searchDate = new Date(date);
    searchDate.setHours(0, 0, 0, 0);

    const slotStartTime = new Date(startTime);
    const slotEndTime = new Date(endTime);

    // 5. Duy·ªát qua t·ª´ng b√°c sƒ© ƒë·ªÉ ki·ªÉm tra khung gi·ªù n√†y c√≥ r·∫£nh kh√¥ng
    const availableDoctors = [];
    const Timeslot = require('../models/timeslot.model');

    for (const doctor of doctors) {
      try {
        // Ki·ªÉm tra xem b√°c sƒ© c√≥ schedule v√†o ng√†y ƒë√≥ kh√¥ng
        const schedule = await DoctorSchedule.findOne({
          doctorUserId: doctor._id,
          date: searchDate,
          status: 'Available'
        });

        if (!schedule) {
          continue; // B√°c sƒ© kh√¥ng c√≥ schedule ng√†y n√†y
        }

        // Ki·ªÉm tra khung gi·ªù c√≥ n·∫±m trong schedule kh√¥ng
        const scheduleStart = new Date(schedule.startTime);
        const scheduleEnd = new Date(schedule.endTime);

        if (slotStartTime < scheduleStart || slotEndTime > scheduleEnd) {
          continue; // Khung gi·ªù n√†y n·∫±m ngo√†i schedule
        }

        // Ki·ªÉm tra khung gi·ªù c√≥ b·ªã ƒë·∫∑t tr∆∞·ªõc kh√¥ng (ki·ªÉm tra Reserved ho·∫∑c Booked timeslots)
        const conflictingTimeslot = await Timeslot.findOne({
          doctorUserId: doctor._id,
          status: { $in: ['Reserved', 'Booked'] },
          // Ki·ªÉm tra c√≥ overlap: timeslot.startTime < slotEndTime AND timeslot.endTime > slotStartTime
          startTime: { $lt: slotEndTime },
          endTime: { $gt: slotStartTime }
        });

        if (conflictingTimeslot) {
          continue; // Khung gi·ªù n√†y ƒë√£ b·ªã ƒë·∫∑t
        }

        // B√°c sƒ© n√†y c√≥ khung gi·ªù n√†y r·∫£nh
        availableDoctors.push({
          doctorId: doctor._id,
          doctorScheduleId: schedule._id, // ‚Üê Schedule c·ªßa ng√†y ƒë√≥
          doctorName: doctor.fullName,
          email: doctor.email,
          phoneNumber: doctor.phoneNumber,
          available: true
        });

      } catch (error) {
        console.warn(`‚ö†Ô∏è  L·ªói ki·ªÉm tra b√°c sƒ© ${doctor._id}:`, error.message);
      }
    }

    console.log('‚úÖ T√¨m ki·∫øm b√°c sƒ© r·∫£nh cho khung gi·ªù c·ª• th·ªÉ:');
    console.log(`   - Ng√†y: ${searchDate.toISOString().split('T')[0]}`);
    console.log(`   - Khung gi·ªù: ${slotStartTime.toISOString()} - ${slotEndTime.toISOString()}`);
    console.log(`   - B√°c sƒ© c√≥ khung gi·ªù r·∫£nh: ${availableDoctors.length}`);

    return {
      date: searchDate,
      serviceId,
      serviceName: service.serviceName,
      requestedTime: {
        startTime: slotStartTime,
        endTime: slotEndTime,
        displayTime: ScheduleHelper.formatTimeSlot(slotStartTime, slotEndTime)
      },
      availableDoctors: availableDoctors,
      totalDoctors: availableDoctors.length
    };
  }
}

module.exports = new AvailableSlotService();

