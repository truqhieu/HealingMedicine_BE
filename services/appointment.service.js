const Appointment = require('../models/appointment.model');
const Timeslot = require('../models/timeslot.model');
const Service = require('../models/service.model');
const User = require('../models/user.model');
const Customer = require('../models/customer.model');
const DoctorSchedule = require('../models/doctorSchedule.model');
const { calculateServicePrice } = require('../utils/promotionHelper');

class AppointmentService {

  async createConsultationAppointment(appointmentData) {
    const {
      patientUserId,
      doctorUserId,
      serviceId,
      doctorScheduleId,
      selectedSlot, // { startTime, endTime } t·ª´ available slots
      notes,
      fullName,
      email,
      phoneNumber,
      appointmentFor
    } = appointmentData;

    // Validate required fields
    if (!patientUserId || !doctorUserId || !serviceId || !doctorScheduleId || !selectedSlot) {
      throw new Error('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ ƒë·∫∑t l·ªãch t∆∞ v·∫•n.');
    }

    if (!selectedSlot.startTime || !selectedSlot.endTime) {
      throw new Error('Th√¥ng tin khung gi·ªù kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i th·ªùi gian.');
    }

    // Ki·ªÉm tra patient c√≥ t·ªìn t·∫°i kh√¥ng v√† l·∫•y th√¥ng tin email
    const patient = await User.findById(patientUserId);
    if (!patient) {
      throw new Error('T√†i kho·∫£n c·ªßa b·∫°n kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
    }

    // Ki·ªÉm tra service c√≥ t·ªìn t·∫°i kh√¥ng
    const service = await Service.findById(serviceId);
    if (!service) {
      throw new Error('D·ªãch v·ª• b·∫°n ch·ªçn kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ch·ªçn d·ªãch v·ª• kh√°c.');
    }

    if (service.status !== 'Active') {
      throw new Error('D·ªãch v·ª• n√†y hi·ªán kh√¥ng kh·∫£ d·ª•ng');
    }

    // ‚≠ê T√≠nh promotion cho service n√†y
    const promotionData = await calculateServicePrice(serviceId, service.price);
    const finalPrice = promotionData.finalPrice;
    const originalPrice = promotionData.originalPrice;
    
    console.log('üí∞ Th√¥ng tin gi√° d·ªãch v·ª•:');
    console.log('   - Gi√° g·ªëc:', originalPrice, 'VND');
    console.log('   - Gi√° sau gi·∫£m:', finalPrice, 'VND');
    if (promotionData.hasPromotion) {
      console.log('   - C√≥ promotion:', promotionData.promotionInfo.title);
      console.log('   - Gi·∫£m:', promotionData.discountAmount, 'VND');
    }

    // Ki·ªÉm tra n·∫øu service y√™u c·∫ßu thanh to√°n tr∆∞·ªõc (Consultation)
    if (service.isPrepaid && service.category === 'Consultation') {
      console.log('‚ö†Ô∏è Service n√†y y√™u c·∫ßu thanh to√°n tr∆∞·ªõc:', service.serviceName);
      console.log('üí∞ S·ªë ti·ªÅn c·∫ßn thanh to√°n:', finalPrice, 'VND');
    }

    // X√°c ƒë·ªãnh mode d·ª±a v√†o category c·ªßa service
    let appointmentMode;
    if (service.category === 'Consultation') {
      appointmentMode = 'Online'; // T∆∞ v·∫•n online
    } else if (service.category === 'Examination') {
      appointmentMode = 'Offline'; // Kh√°m offline
    } else {
      appointmentMode = 'Online'; // M·∫∑c ƒë·ªãnh online
    }

    // X√°c ƒë·ªãnh customerId d·ª±a v√†o appointmentFor
    // appointmentFor: 'self' | 'other'
    let customerId = null;
    
    // Log th√¥ng tin ƒë·ªÉ ki·ªÉm tra
    console.log('üìã Th√¥ng tin ƒë·∫∑t l·ªãch:');
    console.log('- Service:', service.serviceName);
    console.log('- Category:', service.category);
    console.log('- isPrepaid:', service.isPrepaid);
    console.log('- Mode ƒë∆∞·ª£c set:', appointmentMode);
    console.log('- H·ªç t√™n t·ª´ form:', fullName);
    console.log('- SƒêT t·ª´ form:', phoneNumber);
    console.log('- Email t·ª´ user ƒëƒÉng nh·∫≠p:', patient.email);
    console.log('- ƒê·∫∑t cho:', appointmentFor || 'self');

    // ‚≠ê TH√äM: Validate customer conflict khi ƒë·∫∑t cho ng∆∞·ªùi kh√°c
    if (appointmentFor === 'other' && fullName && email) {
      console.log(`üîç Checking customer conflict for: ${fullName} <${email}>`);
      
      // Normalize name v√† email (lowercase, remove extra spaces/diacritics)
      const normalizeString = (str) => {
        return str
          .toLowerCase()
          .trim()
          .replace(/\s+/g, ' ') // Normalize spaces
          .normalize('NFD') // Remove diacritics
          .replace(/[\u0300-\u036f]/g, '');
      };

      const normalizedFullName = normalizeString(fullName);
      const normalizedEmail = normalizeString(email);
      
      console.log(`   - Normalized: ${normalizedFullName} <${normalizedEmail}>`);
      
      // T√¨m customer v·ªõi matching fullName + email
      const Customer = require('../models/customer.model');
      const existingCustomer = await Customer.findOne({
        fullName: new RegExp(`^${fullName.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}$`, 'i'),
        email: new RegExp(`^${email.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}$`, 'i')
      });
      
      if (existingCustomer) {
        console.log(` T√¨m th·∫•y existing customer: ${existingCustomer._id}`);
        
        // Ki·ªÉm tra xem customer n√†y ƒë√£ c√≥ appointment v√†o khung gi·ªù n√†y ch∆∞a
        const conflictAppointment = await Appointment.findOne({
          customerId: existingCustomer._id,
          status: { $in: ['Pending', 'Approved', 'CheckedIn', 'Completed'] },
          'timeslotId': {
            $elemMatch: {
              startTime: new Date(selectedSlot.startTime),
              endTime: new Date(selectedSlot.endTime)
            }
          }
        }).populate('timeslotId');

        // N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c qua $elemMatch, th·ª≠ c√°ch kh√°c
        if (!conflictAppointment) {
          const conflictAppt = await Appointment.findOne({
            customerId: existingCustomer._id,
            status: { $in: ['Pending', 'Approved', 'CheckedIn', 'Completed'] }
          }).populate('timeslotId');

          if (conflictAppt && conflictAppt.timeslotId) {
            const appointmentStartTime = new Date(conflictAppt.timeslotId.startTime);
            const appointmentEndTime = new Date(conflictAppt.timeslotId.endTime);
            const slotStartTime = new Date(selectedSlot.startTime);
            const slotEndTime = new Date(selectedSlot.endTime);
            
            // ‚≠ê TH√äM: T√≠nh buffer time (10 ph√∫t)
            const bufferTime = 10; // 10 ph√∫t buffer
            const slotEndTimeWithBuffer = new Date(slotEndTime.getTime() + bufferTime * 60000);
            
            // Conflict n·∫øu: slotStartTime < appointmentEndTime && slotEndTimeWithBuffer > appointmentStartTime
            if (slotStartTime < appointmentEndTime && slotEndTimeWithBuffer > appointmentStartTime) {
              console.log(`‚ùå Customer ${fullName} ƒë√£ c√≥ l·ªãch kh√°m v√†o khung gi·ªù n√†y (bao g·ªìm buffer time)`);
              throw new Error(`${fullName} ƒë√£ c√≥ l·ªãch kh√°m v√†o khung gi·ªù n√†y r·ªìi. Vui l√≤ng ch·ªçn khung gi·ªù kh√°c!`);
            }
          }
        } else {
          console.log(` Customer ${fullName} ƒë√£ c√≥ l·ªãch kh√°m v√†o khung gi·ªù n√†y`);
          throw new Error(`${fullName} ƒë√£ c√≥ l·ªãch kh√°m v√†o khung gi·ªù n√†y r·ªìi. Vui l√≤ng ch·ªçn khung gi·ªù kh√°c!`);
        }
      }
    }

    // ‚≠ê TH√äM: CHECK TIMESLOT TR∆Ø·ªöC KHI T·∫†O ‚ùå
    // ƒê·ªÉ tr√°nh race condition: 2 request c√πng l√∫c
    const slotStartTime = new Date(selectedSlot.startTime);
    const slotEndTime = new Date(selectedSlot.endTime);
    
    // ‚≠ê TH√äM: T√≠nh buffer time (10 ph√∫t)
    const timeslotBufferTime = 10; // 10 ph√∫t buffer
    const slotEndTimeWithBuffer = new Date(slotEndTime.getTime() + timeslotBufferTime * 60000);
    
    // ‚≠ê Kh√¥ng cho ƒë·∫∑t th·ªùi gian ·ªü qu√° kh·ª©
    const nowUtc = new Date();
    if (slotStartTime.getTime() < nowUtc.getTime()) {
      throw new Error('Kh√¥ng th·ªÉ ƒë·∫∑t th·ªùi gian ·ªü qu√° kh·ª©');
    }
    
    // Ki·ªÉm tra conflict v·ªõi timeslots ƒë√£ c√≥ (bao g·ªìm buffer time)
    const conflictingTimeslots = await Timeslot.find({
      doctorUserId: doctorUserId,
      startTime: { $lt: slotEndTimeWithBuffer },
      endTime: { $gt: slotStartTime },
      status: { $in: ['Reserved', 'Booked'] }
    });

    if (conflictingTimeslots.length > 0) {
      console.log('‚ùå Khung gi·ªù b·ªã conflict v·ªõi timeslots ƒë√£ c√≥:', conflictingTimeslots.length);
      conflictingTimeslots.forEach(ts => {
        console.log(`   - Timeslot ${ts._id}: ${ts.startTime} - ${ts.endTime} (${ts.status})`);
      });
      throw new Error(`Khung gi·ªù n√†y ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t ho·∫∑c ƒëang ch·ªù thanh to√°n. Vui l√≤ng ch·ªçn th·ªùi gian kh√°c.`);
    }

    // Validate selectedSlot duration ph·∫£i kh·ªõp v·ªõi service duration
    const slotDurationMinutes = (slotEndTime - slotStartTime) / 60000;

    if (slotDurationMinutes !== service.durationMinutes) {
      throw new Error(
        `Khung gi·ªù kh√¥ng h·ª£p l·ªá. D·ªãch v·ª• "${service.serviceName}" c·∫ßn ${service.durationMinutes} ph√∫t, ` +
        `nh∆∞ng th·ªùi gian b·∫°n ch·ªçn l√† ${slotDurationMinutes} ph√∫t. Vui l√≤ng ch·ªçn l·∫°i.`
      );
    }

    // Ki·ªÉm tra doctor schedule
    const schedule = await DoctorSchedule.findById(doctorScheduleId);
    if (!schedule) {
      throw new Error('L·ªãch l√†m vi·ªác c·ªßa b√°c sƒ© kh√¥ng t·ªìn t·∫°i. Vui l√≤ng t·∫£i l·∫°i trang ho·∫∑c ch·ªçn b√°c sƒ© kh√°c.');
    }

    // Ki·ªÉm tra doctor c√≥ t·ªìn t·∫°i kh√¥ng (t·ª´ b·∫£ng User v·ªõi role="Doctor")
    const doctor = await User.findById(doctorUserId);
    if (!doctor) {
      throw new Error('B√°c sƒ© b·∫°n ch·ªçn kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ch·ªçn b√°c sƒ© kh√°c.');
    }

    if (doctor.role !== 'Doctor') {
      throw new Error('B√°c sƒ© b·∫°n ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn b√°c sƒ© kh√°c.');
    }

    if (doctor.status !== 'Active') {
      throw new Error('B√°c sƒ© b·∫°n ch·ªçn hi·ªán kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ch·ªçn b√°c sƒ© kh√°c.');
    }

    // ‚≠ê TH√äM: Ki·ªÉm tra user ƒë√£ c√≥ l·ªãch h·∫πn tr√πng gi·ªù v·ªõi b√°c sƒ© hi·ªán t·∫°i ch∆∞a
    // Cho ph√©p ƒë·∫∑t tr√πng gi·ªù v·ªõi b√°c sƒ© kh√°c
    const slotStart = new Date(selectedSlot.startTime);
    const slotEnd = new Date(selectedSlot.endTime);
    
    // L·∫•y appointments c·ªßa user v·ªõi b√°c sƒ© hi·ªán t·∫°i trong c√πng ng√†y
    const sameDayAppointments = await Appointment.find({
      patientUserId,
      doctorUserId,
      status: { $in: ['PendingPayment', 'Pending', 'Approved', 'CheckedIn'] },
      timeslotId: { $exists: true }
    })
    .populate({
      path: 'timeslotId',
      select: 'startTime endTime'
    });

    // Filter appointments c√≥ overlap th·ªùi gian (bao g·ªìm buffer time)
    const userBufferTime = 10; // 10 ph√∫t buffer
    const slotEndWithBuffer = new Date(slotEnd.getTime() + userBufferTime * 60000);
    
    for (const apt of sameDayAppointments) {
      if (!apt.timeslotId) continue;

      const aptStart = new Date(apt.timeslotId.startTime);
      const aptEnd = new Date(apt.timeslotId.endTime);
      
      // Check overlap: (start1 < end2) AND (end1WithBuffer > start2)
      const hasTimeOverlap = (slotStart < aptEnd && slotEndWithBuffer > aptStart);
      
      if (hasTimeOverlap) {
        const aptDateVN = aptStart.toLocaleDateString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' });
        const aptStartVN = aptStart.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit', hour12: false, timeZone: 'Asia/Ho_Chi_Minh' });
        const aptEndVN = aptEnd.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit', hour12: false, timeZone: 'Asia/Ho_Chi_Minh' });
        
        throw new Error(
          `B·∫°n ƒë√£ c√≥ l·ªãch h·∫πn v·ªõi b√°c sƒ© n√†y v√†o ${aptDateVN} t·ª´ ${aptStartVN} - ${aptEndVN}. ` +
          `Vui l√≤ng ch·ªçn b√°c sƒ© kh√°c ho·∫∑c th·ªùi gian kh√°c.`
        );
      }
    }

    // N·∫øu ƒë·∫∑t cho ng∆∞·ªùi kh√°c, t·∫°o Customer
    if (appointmentFor === 'other') {
      if (!fullName || !email || !phoneNumber) {
        throw new Error('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n, email v√† s·ªë ƒëi·ªán tho·∫°i c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c ƒë·∫∑t l·ªãch (customer)');
      }

      // ‚≠ê Validate: Check xem user ƒë√£ ƒë·∫∑t cho customer n√†y v√†o c√πng th·ªùi gian ch∆∞a
      // Normalize function ƒë·ªÉ so s√°nh kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng, d·∫•u c√°ch
      const normalizeString = (str) => {
        if (!str) return '';
        return str.toLowerCase().trim().replace(/\s+/g, ' ');
      };

      const normalizedFullName = normalizeString(fullName);
      const normalizedEmail = normalizeString(email);

      // L·∫•y t·∫•t c·∫£ appointments c·ªßa user v√†o c√πng th·ªùi gian
      const slotStart = new Date(selectedSlot.startTime);
      const slotEnd = new Date(selectedSlot.endTime);

      const overlappingAppointments = await Appointment.find({
        patientUserId,
        appointmentFor: 'other',
        status: { $in: ['PendingPayment', 'Pending', 'Approved', 'CheckedIn'] },
        customerId: { $exists: true },
        timeslotId: { $exists: true }
      })
      .populate({
        path: 'timeslotId',
        select: 'startTime endTime'
      })
      .populate({
        path: 'customerId',
        select: 'fullName email'
      });

      // Filter appointments c√≥ overlap th·ªùi gian (bao g·ªìm buffer time)
      for (const apt of overlappingAppointments) {
        if (!apt.timeslotId || !apt.customerId) continue;

        const aptStart = new Date(apt.timeslotId.startTime);
        const aptEnd = new Date(apt.timeslotId.endTime);

        // ‚≠ê TH√äM: T√≠nh buffer time (10 ph√∫t)
        const customerBufferTime = 10; // 10 ph√∫t buffer
        const slotEndWithBuffer = new Date(slotEnd.getTime() + customerBufferTime * 60000);

        // Check overlap: (start1 < end2) AND (end1WithBuffer > start2)
        const hasTimeOverlap = (slotStart < aptEnd && slotEndWithBuffer > aptStart);

        if (hasTimeOverlap) {
          // C√≥ tr√πng th·ªùi gian ‚Üí check xem c√≥ tr√πng customer kh√¥ng
          const existingFullName = normalizeString(apt.customerId.fullName);
          const existingEmail = normalizeString(apt.customerId.email);

          if (existingFullName === normalizedFullName && existingEmail === normalizedEmail) {
            const aptStartDisplay = `${String(aptStart.getUTCHours()).padStart(2, '0')}:${String(aptStart.getUTCMinutes()).padStart(2, '0')}`;
            const aptEndDisplay = `${String(aptEnd.getUTCHours()).padStart(2, '0')}:${String(aptEnd.getUTCMinutes()).padStart(2, '0')}`;
            
            throw new Error(
              `B·∫°n ƒë√£ ƒë·∫∑t l·ªãch cho "${fullName}" v√†o ${aptStartDisplay} - ${aptEndDisplay}. ` +
              `Vui l√≤ng ch·ªçn th·ªùi gian kh√°c.`
            );
          }
        }
      }

      // T·∫°o Customer m·ªõi
      const newCustomer = await Customer.create({
        patientUserId: patientUserId, 
        fullName: fullName,
        email: email, 
        phoneNumber: phoneNumber,
        hasAccount: false,
        linkedUserId: null
      });

      customerId = newCustomer._id;
      console.log('‚úÖ ƒê√£ t·∫°o Customer cho ng∆∞·ªùi ƒë∆∞·ª£c ƒë·∫∑t l·ªãch:');
      console.log('   - Customer ID:', newCustomer._id);
      console.log('   - H·ªç t√™n:', fullName);
      console.log('   - Email:', email);
      console.log('   - SƒêT:', phoneNumber);
    }

    // T·∫°o Timeslot m·ªõi t·ª´ slot ƒë∆∞·ª£c ch·ªçn
    const newTimeslot = await Timeslot.create({
      doctorScheduleId: schedule._id,
      doctorUserId,
      serviceId,
      startTime: new Date(selectedSlot.startTime),
      endTime: new Date(selectedSlot.endTime),
      breakAfterMinutes: 10,
      // ‚≠ê FIXED: N·∫øu d·ªãch v·ª• c·∫ßn thanh to√°n tr∆∞·ªõc, slot l√† "Reserved" (ch∆∞a x√°c nh·∫≠n)
      // Khi thanh to√°n xong m·ªõi th√†nh "Booked"
      status: service.isPrepaid ? 'Reserved' : 'Booked',
      appointmentId: null // S·∫Ω update sau khi t·∫°o appointment
    });

    console.log('‚úÖ ƒê√£ t·∫°o Timeslot:', newTimeslot._id);

    // X√°c ƒë·ªãnh type d·ª±a v√†o category
    let appointmentType;
    if (service.category === 'Consultation') {
      appointmentType = 'Consultation';
    } else if (service.category === 'Examination') {
      appointmentType = 'Examination';
    } else {
      appointmentType = 'Consultation'; // M·∫∑c ƒë·ªãnh
    }

    // X√°c ƒë·ªãnh status v√† expireAt d·ª±a v√†o isPrepaid
    let appointmentStatus = 'Pending';
    let paymentHoldExpiresAt = null;
    
    if (service.isPrepaid) {
      // N·∫øu c·∫ßn thanh to√°n tr∆∞·ªõc, set status PendingPayment v√† expire sau 3 ph√∫t (cho demo)
      appointmentStatus = 'PendingPayment';
      paymentHoldExpiresAt = new Date(Date.now() + 3 * 60 * 1000); // 3 ph√∫t (demo)
      console.log('üí≥ Appointment c·∫ßn thanh to√°n tr∆∞·ªõc, gi·ªØ slot ƒë·∫øn:', paymentHoldExpiresAt);
    }

    // T·∫°o appointment m·ªõi
    console.log('‚úÖ T·∫°o appointment v·ªõi data:', {
      patientUserId,
      customerId,
      doctorUserId,
      serviceId,
      status: appointmentStatus,
      type: appointmentType,
      mode: appointmentMode
    });

    const newAppointment = await Appointment.create({
      patientUserId, // Ng∆∞·ªùi ƒë·∫∑t l·ªãch (booker)
      customerId, // null n·∫øu ƒë·∫∑t cho b·∫£n th√¢n, c√≥ gi√° tr·ªã n·∫øu ƒë·∫∑t cho ng∆∞·ªùi kh√°c
      doctorUserId,
      serviceId,
      timeslotId: newTimeslot._id,
      status: appointmentStatus, // 'PendingPayment' n·∫øu isPrepaid, 'Pending' n·∫øu kh√¥ng
      type: appointmentType, // D·ª±a v√†o service.category
      mode: appointmentMode, // Consultation=Online, Examination=Offline
      notes: notes || null,
      bookedByUserId: patientUserId,
      paymentHoldExpiresAt: paymentHoldExpiresAt,
      appointmentFor: appointmentFor || 'self', // ‚≠ê TH√äM: L∆∞u appointmentFor
      // ‚≠ê TH√äM: L∆∞u promotion info
      promotionId: promotionData.promotionInfo?.promotionId || null,
      originalPrice: originalPrice,
      finalPrice: finalPrice,
      discountAmount: promotionData.discountAmount
    });

    console.log('‚úÖ Appointment ƒë√£ ƒë∆∞·ª£c t·∫°o:', {
      id: newAppointment._id,
      patientUserId: newAppointment.patientUserId,
      customerId: newAppointment.customerId,
      appointmentFor: newAppointment.appointmentFor,
      status: newAppointment.status
    });

    // Update timeslot v·ªõi appointmentId
    // ‚≠ê FIXED: Update status th√†nh "Reserved" n·∫øu c·∫ßn thanh to√°n
    await Timeslot.findByIdAndUpdate(newTimeslot._id, {
      appointmentId: newAppointment._id,
      status: service.isPrepaid ? 'Reserved' : 'Booked'
    });

    // N·∫øu c·∫ßn thanh to√°n tr∆∞·ªõc, t·∫°o Payment record v√† QR code
    let paymentRecord = null;
    let qrData = null;
    
    if (service.isPrepaid) {
      const paymentService = require('./payment.service');
      
      // X√°c ƒë·ªãnh t√™n kh√°ch h√†ng ƒë·ªÉ hi·ªÉn th·ªã tr√™n QR
      let customerName = patient.fullName; // M·∫∑c ƒë·ªãnh l√† ng∆∞·ªùi ƒë·∫∑t l·ªãch
      if (customerId) {
        // N·∫øu ƒë·∫∑t cho ng∆∞·ªùi kh√°c, d√πng t√™n customer
        const customer = await Customer.findById(customerId);
        if (customer) {
          customerName = customer.fullName;
        }
      }
      
      const paymentResult = await paymentService.createPayment({
        appointmentId: newAppointment._id,
        patientUserId: patientUserId,
        amount: finalPrice, // ‚≠ê S·ª≠a: D√πng finalPrice thay v√¨ service.price
        holdExpiresAt: paymentHoldExpiresAt,
        customerName: customerName // T√™n s·∫Ω hi·ªÉn th·ªã tr√™n QR
      });

      paymentRecord = paymentResult.payment;
      qrData = paymentResult.qrData;

      // Update appointment v·ªõi paymentId
      await Appointment.findByIdAndUpdate(newAppointment._id, {
        paymentId: paymentRecord._id
      });

      console.log('‚úÖ ƒê√£ t·∫°o Payment record:', paymentRecord._id);
      console.log('üí∞ S·ªë ti·ªÅn c·∫ßn thanh to√°n:', finalPrice, 'VND');
      console.log('üì± QR Code:', qrData.qrUrl);
    }

    // Populate th√¥ng tin ƒë·∫ßy ƒë·ªß
    const populatedAppointment = await Appointment.findById(newAppointment._id)
      .populate('patientUserId', 'fullName email')
      .populate('doctorUserId', 'fullName email')
      .populate('serviceId', 'serviceName price durationMinutes category isPrepaid')
      .populate('timeslotId', 'startTime endTime')
      .populate('customerId', 'fullName email phoneNumber')
      .populate('paymentId');

    console.log('‚úÖ Appointment ƒë√£ t·∫°o v·ªõi mode:', populatedAppointment.mode);
    console.log('‚úÖ Status:', populatedAppointment.status);

    // Chu·∫©n h√≥a response cho FE: tr·∫£ requirePayment v√† th√¥ng tin QR n·∫øu c·∫ßn
    const responsePayload = {
      appointmentId: String(populatedAppointment._id),
      service: populatedAppointment.serviceId?.serviceName,
      doctor: populatedAppointment.doctorUserId?.fullName,
      startTime: populatedAppointment.timeslotId?.startTime,
      endTime: populatedAppointment.timeslotId?.endTime,
      status: populatedAppointment.status,
      type: populatedAppointment.type,
      mode: populatedAppointment.mode,
      requirePayment: !!service.isPrepaid
    };

    if (service.isPrepaid && paymentRecord) {
      responsePayload.payment = {
        paymentId: String(paymentRecord._id),
        amount: service.price,
        method: paymentRecord.method,
        status: paymentRecord.status,
        expiresAt: paymentRecord.holdExpiresAt,
        QRurl: paymentRecord.QRurl || (qrData ? qrData.qrUrl : null)
      };
    }

    return responsePayload;
  }

  async reviewAppointment(appointmentId, staffUserId, action, cancelReason = null) {
    try {
      // Ki·ªÉm tra appointment t·ªìn t·∫°i
      const appointment = await Appointment.findById(appointmentId);
      if (!appointment) {
        throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn');
      }

      // Ki·ªÉm tra action h·ª£p l·ªá
      if (!['approve', 'cancel'].includes(action)) {
        throw new Error('Action ph·∫£i l√† "approve" ho·∫∑c "cancel"');
      }

      // Ki·ªÉm tra appointment status c√≥ th·ªÉ review kh√¥ng
      if (!['Pending', 'Approved'].includes(appointment.status)) {
        throw new Error(`Kh√¥ng th·ªÉ x·ª≠ l√Ω l·ªãch h·∫πn ·ªü tr·∫°ng th√°i ${appointment.status}`);
      }

      // N·∫øu l√† PendingPayment, kh√¥ng ƒë∆∞·ª£c ph√©p x·ª≠ l√Ω
      if (appointment.status === 'PendingPayment') {
        throw new Error('L·ªãch h·∫πn ƒëang ch·ªù thanh to√°n. Vui l√≤ng ch·ªù kh√°ch h√†ng thanh to√°n ho·∫∑c h·ªßy y√™u c·∫ßu n√†y.');
      }

      // L·∫•y ƒë·∫ßy ƒë·ªß th√¥ng tin
      const populatedAppointment = await Appointment.findById(appointmentId)
        .populate('patientUserId', 'fullName email')
        .populate('customerId', 'fullName email phoneNumber')
        .populate('doctorUserId', 'fullName email')
        .populate('serviceId', 'serviceName price durationMinutes category')
        .populate('timeslotId', 'startTime endTime');

      // X√°c ƒë·ªãnh ng∆∞·ªùi nh·∫≠n email
      let emailRecipient, recipientName;
      if (populatedAppointment.customerId) {
        emailRecipient = populatedAppointment.customerId.email;
        recipientName = populatedAppointment.customerId.fullName;
      } else {
        emailRecipient = populatedAppointment.patientUserId.email;
        recipientName = populatedAppointment.patientUserId.fullName;
      }

      // C√°c bi·∫øn d√πng chung
      let updatedAppointment;
      let emailData;
      const emailService = require('./email.service');

      // ========== APPROVE ACTION ==========
      if (action === 'approve') {
        console.log('‚úÖ Duy·ªát l·ªãch h·∫πn...');

        // ‚≠ê N·∫øu l√† Consultation (Online), t·∫°o Google Meet link
        let meetLink = null;
        if (populatedAppointment.mode === 'Online' && populatedAppointment.type === 'Consultation') {
          console.log('üìû T·∫°o Google Meet link cho t∆∞ v·∫•n online...');
          
          const googleMeetService = require('./googleMeetService');
          
          try {
            meetLink = await googleMeetService.generateMeetLink({
              appointmentId: appointmentId,
              doctorName: populatedAppointment.doctorUserId.fullName,
              patientName: recipientName,
              startTime: populatedAppointment.timeslotId.startTime,
              endTime: populatedAppointment.timeslotId.endTime,
              serviceName: populatedAppointment.serviceId.serviceName
            });
            console.log('‚úÖ Google Meet link ƒë√£ t·∫°o:', meetLink);
          } catch (meetError) {
            console.error('‚ùå L·ªói t·∫°o Google Meet link:', meetError.message);
            // V·∫´n ti·∫øp t·ª•c, fallback link ƒë∆∞·ª£c x·ª≠ l√Ω trong service
          }
        }

        // Update status sang Approved
        updatedAppointment = await Appointment.findByIdAndUpdate(
          appointmentId,
          {
            status: 'Approved',
            approvedByUserId: staffUserId,
            linkMeetUrl: meetLink
          },
          { new: true }
        )
          .populate('patientUserId', 'fullName email')
          .populate('customerId', 'fullName email phoneNumber')
          .populate('doctorUserId', 'fullName email')
          .populate('serviceId', 'serviceName price durationMinutes category')
          .populate('timeslotId', 'startTime endTime');

        console.log('‚úÖ Appointment updated:', updatedAppointment._id);

        // Prepare email
        emailData = {
          fullName: recipientName,
          serviceName: updatedAppointment.serviceId.serviceName,
          doctorName: updatedAppointment.doctorUserId.fullName,
          startTime: updatedAppointment.timeslotId.startTime,
          endTime: updatedAppointment.timeslotId.endTime,
          type: updatedAppointment.type,
          mode: updatedAppointment.mode,
          meetLink: updatedAppointment.linkMeetUrl
        };

        // ‚≠ê G·ª¨I EMAIL ASYNC (NON-BLOCKING) - Kh√¥ng ch·ªù xong m·ªõi tr·∫£ response
        (async () => {
          try {
            console.log('üìß B·∫Øt ƒë·∫ßu g·ª≠i email x√°c nh·∫≠n duy·ªát...');
            await emailService.sendAppointmentApprovedEmail(emailRecipient, emailData);
            console.log(`‚úÖ Email x√°c nh·∫≠n duy·ªát ƒë√£ g·ª≠i th√†nh c√¥ng ƒë·∫øn: ${emailRecipient}`);
          } catch (emailError) {
            console.error('‚ùå L·ªói g·ª≠i email x√°c nh·∫≠n duy·ªát:', emailError.message);
            console.error('üìß Email recipient:', emailRecipient);
            console.error('üìß Error details:', emailError);
          }
        })();

        // ‚≠ê TR·∫¢ RESPONSE NGAY (response kh√¥ng ch·ªù email)
        return {
          success: true,
          message: 'L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c duy·ªát. Email x√°c nh·∫≠n s·∫Ω ƒë∆∞·ª£c g·ª≠i trong v√†i gi√¢y',
          data: updatedAppointment
        };
      }

      // ========== CANCEL ACTION ==========
      if (action === 'cancel') {
        console.log('‚ùå H·ªßy l·ªãch h·∫πn...');

        // X√≥a timeslot
        if (populatedAppointment.timeslotId) {
          await Timeslot.findByIdAndUpdate(populatedAppointment.timeslotId._id, {
            status: 'Available',
            appointmentId: null
          });
          console.log('‚úÖ Timeslot ƒë√£ ƒë∆∞·ª£c release');
        }

        // Update status sang Cancelled
        updatedAppointment = await Appointment.findByIdAndUpdate(
          appointmentId,
          {
            status: 'Cancelled',
            approvedByUserId: staffUserId,
            cancelReason: cancelReason || 'L·ªãch h·∫πn ƒë√£ b·ªã h·ªßy',
            cancelledAt: new Date()
          },
          { new: true }
        )
          .populate('patientUserId', 'fullName email')
          .populate('customerId', 'fullName email phoneNumber')
          .populate('doctorUserId', 'fullName email')
          .populate('serviceId', 'serviceName price durationMinutes category')
          .populate('timeslotId', 'startTime endTime');

        console.log('‚úÖ Appointment cancelled:', updatedAppointment._id);

        // Prepare email
        emailData = {
          fullName: recipientName,
          serviceName: updatedAppointment.serviceId.serviceName,
          doctorName: updatedAppointment.doctorUserId.fullName,
          startTime: updatedAppointment.timeslotId.startTime,
          endTime: updatedAppointment.timeslotId.endTime,
          type: updatedAppointment.type,
          mode: updatedAppointment.mode,
          cancelReason: cancelReason || 'L·ªãch h·∫πn ƒë√£ b·ªã h·ªßy'
        };

        // ‚≠ê G·ª¨I EMAIL ASYNC (NON-BLOCKING) - Kh√¥ng ch·ªù xong m·ªõi tr·∫£ response
        (async () => {
          try {
            console.log('üìß B·∫Øt ƒë·∫ßu g·ª≠i email th√¥ng b√°o h·ªßy l·ªãch...');
            await emailService.sendAppointmentCancelledEmail(emailRecipient, emailData);
            console.log(`‚úÖ Email th√¥ng b√°o h·ªßy l·ªãch ƒë√£ g·ª≠i th√†nh c√¥ng ƒë·∫øn: ${emailRecipient}`);
          } catch (emailError) {
            console.error('‚ùå L·ªói g·ª≠i email th√¥ng b√°o h·ªßy:', emailError.message);
            console.error('üìß Email recipient:', emailRecipient);
            console.error('üìß Error details:', emailError);
          }
        })();

        // ‚≠ê TR·∫¢ RESPONSE NGAY (response kh√¥ng ch·ªù email)
        return {
          success: true,
          message: 'L·ªãch h·∫πn ƒë√£ b·ªã h·ªßy. Email th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c g·ª≠i trong v√†i gi√¢y',
          data: updatedAppointment
        };
      }

    } catch (error) {
      console.error('‚ùå L·ªói x·ª≠ l√Ω l·ªãch h·∫πn:', error);
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch l·ªãch h·∫πn ch·ªù duy·ªát (Pending)
   * D√πng cho staff review - HI·ªÇN TH·ªä T·∫§T C·∫¢ (kh√¥ng gi·ªõi h·∫°n th·ªùi gian)
   * ‚ö†Ô∏è CH·ªà hi·ªÉn th·ªã l·ªãch "Pending" - kh√¥ng hi·ªÉn th·ªã "PendingPayment"
   * (PendingPayment ƒëang ch·ªù thanh to√°n, ch∆∞a c·∫ßn Staff duy·ªát)
   */
  async getPendingAppointments(filters = {}) {
    try {
      const query = {
        status: 'Pending' // ‚≠ê CH·ªà l·∫•y Pending, KH√îNG l·∫•y PendingPayment
      };

      // ‚≠ê C√≥ th·ªÉ filter theo doctor (n·∫øu c·∫ßn)
      if (filters.doctorUserId) {
        query.doctorUserId = filters.doctorUserId;
      }

      // ‚ö†Ô∏è B·ªé FILTER THEO TH·ªúI GIAN - Staff c·∫ßn xem T·∫§T C·∫¢ l·ªãch pending
      // Staff c·∫ßn duy·ªát/t·ª´ ch·ªëi t·∫•t c·∫£ c√°c y√™u c·∫ßu b·ªánh nh√¢n g·ª≠i ƒë·∫øn,
      // kh√¥ng quan t√¢m ng√†y g·ª≠i l√† bao gi·ªù

      const appointments = await Appointment.find(query)
        .populate('patientUserId', 'fullName email phoneNumber')
        .populate('customerId', 'fullName email phoneNumber')
        .populate('doctorUserId', 'fullName email')
        .populate('serviceId', 'serviceName price durationMinutes category')
        .populate('timeslotId', 'startTime endTime')
        .sort({ createdAt: -1 }); // S·∫Øp x·∫øp m·ªõi nh·∫•t tr∆∞·ªõc

      console.log(`üìã Staff - L·∫•y ${appointments.length} l·ªãch h·∫πn "Pending" (T·∫§T C·∫¢ th·ªùi gian, kh√¥ng bao g·ªìm PendingPayment)`);

      return {
        success: true,
        data: appointments,
        count: appointments.length
      };
    } catch (error) {
      console.error('‚ùå L·ªói l·∫•y danh s√°ch l·ªãch h·∫πn:', error);
      throw error;
    }
  }

  /**
   * Helper: Check v√† update expired appointments realtime
   * @private
   */
  async _checkAndUpdateExpiredAppointments(appointments) {
    const now = new Date();
    let updatedCount = 0;

    for (const appointment of appointments) {
      // Ch·ªâ check appointments ƒëang "Pending"
      if (appointment.status !== 'Pending') continue;
      
      if (!appointment.timeslotId || !appointment.timeslotId.startTime) continue;

      // L·∫•y ng√†y kh√°m t·ª´ timeslot
      const appointmentDate = new Date(appointment.timeslotId.startTime);
      
      // T·∫°o cutoff time: 18:00 UTC c·ªßa ng√†y h·∫πn
      const cutoffTime = new Date(appointmentDate);
      cutoffTime.setUTCHours(18, 0, 0, 0);

      // Ki·ªÉm tra: N·∫øu hi·ªán t·∫°i ƒë√£ qua 18:00 c·ªßa ng√†y h·∫πn
      if (now >= cutoffTime) {
        appointment.status = 'Expired';
        await appointment.save();
        updatedCount++;
      }
    }

    if (updatedCount > 0) {
      console.log(`‚è∞ [getAllAppointments] ƒê√£ expire ${updatedCount} appointment(s)`);
    }
  }

  /**
   * L·∫•y danh s√°ch t·∫•t c·∫£ appointments (c√≥ filter)
   */
  async getAllAppointments(filters = {}) {
    try {
      const query = {};

      if (filters.status) {
        query.status = filters.status;
      }

      if (filters.doctorUserId) {
        query.doctorUserId = filters.doctorUserId;
      }

      if (filters.patientUserId) {
        query.patientUserId = filters.patientUserId;
      }

      if (filters.mode) {
        query.mode = filters.mode;
      }

      if (filters.type) {
        query.type = filters.type;
      }

      const appointments = await Appointment.find(query)
        .populate('patientUserId', 'fullName email')
        .populate('customerId', 'fullName email')
        .populate('doctorUserId', 'fullName email')
        .populate('serviceId', 'serviceName price')
        .populate('timeslotId', 'startTime endTime')
        .sort({ createdAt: -1 });

      // ‚≠ê Check v√† update expired appointments realtime (deprecated - use AppointmentMonitorService instead)
      // await this._checkAndUpdateExpiredAppointments(appointments);

      // L·∫•y l·∫°i data sau khi update (n·∫øu c√≥ thay ƒë·ªïi)
      const updatedAppointments = await Appointment.find(query)
        .populate('patientUserId', 'fullName email')
        .populate('customerId', 'fullName email')
        .populate('doctorUserId', 'fullName email')
        .populate('serviceId', 'serviceName price')
        .populate('timeslotId', 'startTime endTime')
        .sort({ createdAt: -1 });

      return {
        success: true,
        data: updatedAppointments,
        count: updatedAppointments.length
      };
    } catch (error) {
      console.error('‚ùå L·ªói l·∫•y danh s√°ch l·ªãch h·∫πn:', error);
      throw error;
    }
  }

  /**
   * L·∫•y t·∫•t c·∫£ ca kh√°m c·ªßa m·ªôt ng∆∞·ªùi d√πng
   */
  async getUserAppointments(userId, options = {}) {
    try {
      // Build query
      const query = { patientUserId: userId };

      console.log('üîç [getUserAppointments] Query v·ªõi userId:', userId);

      // L·ªçc theo status c·ª• th·ªÉ n·∫øu c√≥
      if (options.status) {
        query.status = options.status;
      } else {
        // M·∫∑c ƒë·ªãnh: L·∫•y t·∫•t c·∫£ c√°c ca kh√°m ƒê√É HO√ÄN T·∫§T ƒê·∫∂T L·ªäCH
        // (bao g·ªìm c·∫£ ƒë·∫∑t l·ªãch kh√°m kh√¥ng c·∫ßn thanh to√°n tr∆∞·ªõc v√† t∆∞ v·∫•n ƒë√£ thanh to√°n)
        // NGO·∫†I TR·ª™ "PendingPayment" (ƒëang ch·ªù thanh to√°n cho t∆∞ v·∫•n online)
        if (options.includePendingPayment) {
          // L·∫•y t·∫•t c·∫£ bao g·ªìm c·∫£ PendingPayment
          query.status = { $in: ['PendingPayment', 'Pending', 'Approved', 'CheckedIn', 'InProgress', 'Completed', 'Cancelled', 'Expired'] };
        } else {
          // M·∫∑c ƒë·ªãnh: Ch·ªâ l·∫•y c√°c ca ƒë√£ ho√†n t·∫•t ƒë·∫∑t l·ªãch (ƒë√£ thanh to√°n n·∫øu c·∫ßn)
          query.status = { $in: ['Pending', 'Approved', 'CheckedIn', 'InProgress', 'Completed', 'Cancelled', 'Expired'] };
        }
      }

      console.log('üîç [getUserAppointments] Final query:', JSON.stringify(query));

      const appointments = await Appointment.find(query)
        .populate('patientUserId', 'fullName email phoneNumber')
        .populate('doctorUserId', 'fullName email specialization')
        .populate('serviceId', 'serviceName price category durationMinutes')
        .populate('timeslotId', 'startTime endTime')
        .populate('customerId', 'fullName email phoneNumber')
        .populate('paymentId') // ‚≠ê Populate t·∫•t c·∫£ fields c·ªßa paymentId ƒë·ªÉ c√≥ _id
        .sort({ createdAt: -1 }); // S·∫Øp x·∫øp theo th·ªùi gian t·∫°o m·ªõi nh·∫•t

      console.log('‚úÖ [getUserAppointments] T√¨m th·∫•y:', appointments.length, 'appointments');
      console.log('üìã [getUserAppointments] Appointments:', appointments.map(apt => ({
        id: apt._id,
        status: apt.status,
        appointmentFor: apt.appointmentFor,
        patientUserId: apt.patientUserId?._id,
        customerId: apt.customerId?._id,
        customerName: apt.customerId?.fullName,
        serviceName: apt.serviceId?.serviceName
      })));

      // Tr·∫£ v·ªÅ ƒë√∫ng format m√† frontend expect
      return appointments.map(apt => ({
        _id: apt._id.toString(),
        status: apt.status,
        type: apt.type,
        mode: apt.mode,
        appointmentFor: apt.appointmentFor || 'self',
        patientUserId: apt.patientUserId ? {
          fullName: apt.patientUserId.fullName,
          email: apt.patientUserId.email,
          phoneNumber: apt.patientUserId.phoneNumber
        } : null,
        doctorUserId: apt.doctorUserId ? {
          fullName: apt.doctorUserId.fullName,
          email: apt.doctorUserId.email,
          specialization: apt.doctorUserId.specialization
        } : null,
        serviceId: apt.serviceId ? {
          serviceName: apt.serviceId.serviceName,
          price: apt.serviceId.price,
          category: apt.serviceId.category,
          durationMinutes: apt.serviceId.durationMinutes
        } : null,
        timeslotId: apt.timeslotId ? {
          startTime: apt.timeslotId.startTime,
          endTime: apt.timeslotId.endTime
        } : null,
        customerId: apt.customerId ? {
          fullName: apt.customerId.fullName,
          email: apt.customerId.email,
          phoneNumber: apt.customerId.phoneNumber
        } : null,
        paymentId: apt.paymentId ? {
          _id: apt.paymentId._id?.toString() || apt.paymentId._id || null,
          status: apt.paymentId.status,
          amount: apt.paymentId.amount,
          method: apt.paymentId.method
        } : null,
        notes: apt.notes || '',
        linkMeetUrl: apt.linkMeetUrl || null,
        checkedInAt: apt.checkedInAt || null,
        createdAt: apt.createdAt,
        updatedAt: apt.updatedAt
      }));
    } catch (error) {
      console.error('‚ùå L·ªói l·∫•y ca kh√°m c·ªßa user:', error);
      throw error;
    }
  }

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i ca kh√°m
   * - Staff: Approved ‚Üí CheckedIn (check-in b·ªánh nh√¢n)
   */
  async updateAppointmentStatus(appointmentId, newStatus, userId) {
    try {
      console.log(`üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i ca kh√°m ${appointmentId} ‚Üí ${newStatus}`);

      // T√¨m appointment
      const appointment = await Appointment.findById(appointmentId);
      if (!appointment) {
        throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn');
      }

      // ‚ö†Ô∏è Ki·ªÉm tra logic chuy·ªÉn tr·∫°ng th√°i
      const currentStatus = appointment.status;

      // ‚úÖ Allowed transitions:
      // Approved ‚Üí CheckedIn (Staff/Nurse check-in b·ªánh nh√¢n ƒë√£ ƒë·∫øn)
      // CheckedIn ‚Üí InProgress (Nurse b·∫Øt ƒë·∫ßu ca kh√°m)
      // InProgress ‚Üí Completed (k·∫øt th√∫c ca)
      // Approved/CheckedIn/InProgress ‚Üí Cancelled (h·ªßy)

      if (newStatus === 'CheckedIn') {
        // Cho ph√©p check-in t·ª´ Approved ho·∫∑c t·ª´ No-Show
        if (!['Approved', 'No-Show'].includes(currentStatus)) {
          throw new Error(`Kh√¥ng th·ªÉ check-in. Ca kh√°m ph·∫£i ·ªü tr·∫°ng th√°i "Approved" ho·∫∑c "No-Show" (hi·ªán t·∫°i: ${currentStatus})`);
        }
        // L∆∞u th·ªùi gian check-in (ho·∫∑c c·∫≠p nh·∫≠t n·∫øu ƒëang chuy·ªÉn l·∫°i t·ª´ No-Show)
        if (!appointment.checkedInAt) {
          appointment.checkedInAt = new Date();
          appointment.checkInByUserId = userId;
        }
      }

      if (newStatus === 'InProgress') {
        if (currentStatus !== 'CheckedIn') {
          throw new Error(`Kh√¥ng th·ªÉ chuy·ªÉn sang ƒëang trong ca. Ca ph·∫£i ·ªü tr·∫°ng th√°i "CheckedIn" (hi·ªán t·∫°i: ${currentStatus})`);
        }
        appointment.inProgressAt = new Date();
        appointment.inProgressByUserId = userId;
      }

      if (newStatus === 'Completed') {
        if (!['CheckedIn', 'InProgress'].includes(currentStatus)) {
          throw new Error(`Kh√¥ng th·ªÉ ho√†n th√†nh. Ca kh√°m ph·∫£i ·ªü tr·∫°ng th√°i "CheckedIn" ho·∫∑c "InProgress" (hi·ªán t·∫°i: ${currentStatus})`);
        }
      }

      if (newStatus === 'Cancelled') {
        const allowedStatuses = ['Approved', 'CheckedIn', 'InProgress'];
        if (!allowedStatuses.includes(currentStatus)) {
          throw new Error(`Kh√¥ng th·ªÉ h·ªßy. Ca kh√°m ch·ªâ c√≥ th·ªÉ h·ªßy khi ·ªü tr·∫°ng th√°i Approved, CheckedIn ho·∫∑c InProgress (hi·ªán t·∫°i: ${currentStatus})`);
        }
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i
      appointment.status = newStatus;
      appointment.updatedAt = new Date();

      // L∆∞u th√¥ng tin ng∆∞·ªùi th·ª±c hi·ªán (Staff/Nurse)
      if (!appointment.updatedBy) {
        appointment.updatedBy = userId;
      }

      await appointment.save();

      // N·∫øu h·ªßy th√¨ m·ªü l·∫°i timeslot ƒë·ªÉ c√≥ th·ªÉ ƒë·∫∑t l·∫°i
      if (newStatus === 'Cancelled' && appointment.timeslotId) {
        try {
          await Timeslot.findByIdAndUpdate(appointment.timeslotId, {
            status: 'Available',
            appointmentId: null
          });
          console.log('üîì Timeslot released due to status update ‚Üí Cancelled');
        } catch (e) {
          console.error('‚ö†Ô∏è Kh√¥ng th·ªÉ release timeslot khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:', e);
        }
      }

      console.log(`‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng: ${currentStatus} ‚Üí ${newStatus}`);

      return {
        success: true,
        message: `C·∫≠p nh·∫≠t tr·∫°ng th√°i ca kh√°m th√†nh c√¥ng: ${currentStatus} ‚Üí ${newStatus}`,
        data: {
          appointmentId: appointment._id,
          oldStatus: currentStatus,
          newStatus: newStatus,
          updatedAt: appointment.updatedAt
        }
      };

    } catch (error) {
      console.error('‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i ca kh√°m:', error);
      throw error;
    }
  }

  /**
   * H·ªßy appointment
   */
  async cancelAppointment({ appointmentId, userId, cancelReason, bankInfo = null }) {
    try {
      console.log(`üîÑ H·ªßy appointment ${appointmentId}`);
      console.log(`   - Type: ${typeof appointmentId}`);
      console.log(`   - Value: ${appointmentId}`);

      const appointment = await Appointment.findById(appointmentId);
      if (!appointment) {
        throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn');
      }

      // Ki·ªÉm tra tr·∫°ng th√°i c√≥ th·ªÉ h·ªßy ƒë∆∞·ª£c kh√¥ng
      const cancellableStatuses = ['Pending', 'Approved', 'PendingPayment'];
      if (!cancellableStatuses.includes(appointment.status)) {
        throw new Error('L·ªãch h·∫πn n√†y kh√¥ng th·ªÉ h·ªßy ƒë∆∞·ª£c');
      }

      // C·∫≠p nh·∫≠t th√¥ng tin h·ªßy
      appointment.status = 'Cancelled';
      appointment.cancelReason = cancelReason || 'Ng∆∞·ªùi d√πng h·ªßy l·ªãch h·∫πn';
      appointment.cancelledAt = new Date();
      appointment.updatedAt = new Date();
      
        // L∆∞u th√¥ng tin ng√¢n h√†ng n·∫øu c√≥
        if (bankInfo) {
          appointment.bankInfo = {
            accountHolderName: bankInfo.accountHolderName || null,
            accountNumber: bankInfo.accountNumber || null,
            bankName: bankInfo.bankName || null
          };
        }

      await appointment.save();

      // ‚≠ê Release the reserved/booked timeslot so others can book it again
      if (appointment.timeslotId) {
        try {
          const timeslot = await Timeslot.findById(appointment.timeslotId);
          if (timeslot) {
            timeslot.status = 'Available';
            timeslot.appointmentId = null;
            await timeslot.save();
            console.log(`üîì Timeslot ${timeslot._id} released back to Available`);
          }
        } catch (e) {
          console.error('‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i timeslot khi h·ªßy l·ªãch:', e);
        }
      }

      console.log(`‚úÖ H·ªßy appointment th√†nh c√¥ng: ${appointmentId}`);

      return {
        success: true,
        message: 'H·ªßy l·ªãch h·∫πn th√†nh c√¥ng',
        data: {
          appointmentId: appointment._id,
          status: appointment.status,
          cancelledAt: appointment.cancelledAt,
          cancelReason: appointment.cancelReason
        }
      };

    } catch (error) {
      console.error('‚ùå L·ªói h·ªßy appointment:', error);
      throw error;
    }
  }

  // L·∫•y appointment by ID v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
  async getAppointmentById(appointmentId) {
    try {
      const appointment = await Appointment.findById(appointmentId)
        .populate('serviceId', 'serviceName price')
        .populate('doctorUserId', 'fullName email phoneNumber')
        .populate('patientUserId', 'fullName email phoneNumber')
        .populate('timeslotId', 'startTime endTime')
        .populate('paymentId', 'amount method status')
        .lean();

      if (!appointment) {
        return null;
      }

      // Format d·ªØ li·ªáu ƒë·ªÉ tr·∫£ v·ªÅ
      return {
        _id: appointment._id,
        type: appointment.type,
        mode: appointment.mode,
        status: appointment.status,
        notes: appointment.notes,
        linkMeetUrl: appointment.linkMeetUrl,
        createdAt: appointment.createdAt,
        updatedAt: appointment.updatedAt,
        cancelledAt: appointment.cancelledAt,
        cancelReason: appointment.cancelReason,
        bankInfo: appointment.bankInfo,
        service: {
          _id: appointment.serviceId?._id,
          serviceName: appointment.serviceId?.serviceName,
          price: appointment.serviceId?.price
        },
        doctor: {
          _id: appointment.doctorUserId?._id,
          fullName: appointment.doctorUserId?.fullName,
          email: appointment.doctorUserId?.email,
          phoneNumber: appointment.doctorUserId?.phoneNumber
        },
        patient: {
          _id: appointment.patientUserId?._id,
          fullName: appointment.patientUserId?.fullName,
          email: appointment.patientUserId?.email,
          phoneNumber: appointment.patientUserId?.phoneNumber
        },
        timeslot: {
          _id: appointment.timeslotId?._id,
          startTime: appointment.timeslotId?.startTime,
          endTime: appointment.timeslotId?.endTime
        },
        payment: appointment.paymentId ? {
          _id: appointment.paymentId._id,
          amount: appointment.paymentId.amount,
          method: appointment.paymentId.method,
          status: appointment.paymentId.status
        } : null
      };
    } catch (error) {
      console.error('‚ùå L·ªói l·∫•y appointment by ID:', error);
      throw error;
    }
  }

  // L·∫•y chi ti·∫øt l·ªãch h·∫πn
  async getAppointmentDetails(appointmentId) {
    try {
      console.log(`üîç L·∫•y chi ti·∫øt l·ªãch h·∫πn: ${appointmentId}`);
      
      const appointment = await Appointment.findById(appointmentId)
        .populate('patientUserId', 'fullName email phone')
        .populate('customerId', 'fullName email phoneNumber')
        .populate('doctorUserId', 'fullName email phone')
        .populate('serviceId', 'serviceName price durationMinutes category')
        .populate('timeslotId', 'startTime endTime')
        .populate('paymentId', 'amount method status expiresAt QRurl')
        .populate('bankInfo', 'accountHolderName accountNumber bankName')
        .lean();

      if (!appointment) {
        throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn');
      }

      // Format d·ªØ li·ªáu tr·∫£ v·ªÅ
      const formattedAppointment = {
        _id: appointment._id,
        status: appointment.status,
        type: appointment.type,
        mode: appointment.mode,
        startTime: appointment.startTime,
        endTime: appointment.endTime,
        notes: appointment.notes,
        createdAt: appointment.createdAt,
        updatedAt: appointment.updatedAt,
        checkedInAt: appointment.checkedInAt,
        completedAt: appointment.completedAt,
        cancelledAt: appointment.cancelledAt,
        cancelReason: appointment.cancelReason,
        patient: appointment.patientUserId ? {
          fullName: appointment.patientUserId.fullName,
          email: appointment.patientUserId.email,
          phone: appointment.patientUserId.phone
        } : null,
        customer: appointment.customerId ? {
          fullName: appointment.customerId.fullName,
          email: appointment.customerId.email,
          phone: appointment.customerId.phoneNumber
        } : null,
        doctor: appointment.doctorUserId ? {
          fullName: appointment.doctorUserId.fullName,
          email: appointment.doctorUserId.email,
          phone: appointment.doctorUserId.phone
        } : null,
        service: appointment.serviceId ? {
          serviceName: appointment.serviceId.serviceName,
          price: appointment.serviceId.price,
          durationMinutes: appointment.serviceId.durationMinutes,
          category: appointment.serviceId.category
        } : null,
        timeslot: appointment.timeslotId ? {
          startTime: appointment.timeslotId.startTime,
          endTime: appointment.timeslotId.endTime
        } : null,
        payment: appointment.paymentId ? {
          amount: appointment.paymentId.amount,
          method: appointment.paymentId.method,
          status: appointment.paymentId.status,
          expiresAt: appointment.paymentId.expiresAt,
          QRurl: appointment.paymentId.QRurl
        } : null,
        bankInfo: appointment.bankInfo ? {
          accountHolderName: appointment.bankInfo.accountHolderName,
          accountNumber: appointment.bankInfo.accountNumber,
          bankName: appointment.bankInfo.bankName
        } : null
      };

      console.log(`‚úÖ L·∫•y chi ti·∫øt l·ªãch h·∫πn th√†nh c√¥ng: ${appointmentId}`);
      return formattedAppointment;

    } catch (error) {
      console.error(`‚ùå L·ªói l·∫•y chi ti·∫øt l·ªãch h·∫πn ${appointmentId}:`, error);
      throw error;
    }
  }
}

module.exports = new AppointmentService();
