const Appointment = require('../models/appointment.model');
const Timeslot = require('../models/timeslot.model');
const Service = require('../models/service.model');
const User = require('../models/user.model');
const Customer = require('../models/customer.model');
const DoctorSchedule = require('../models/doctorSchedule.model');

class AppointmentService {

  async createConsultationAppointment(appointmentData) {
    const {
      patientUserId,
      doctorUserId,
      serviceId,
      doctorScheduleId,
      selectedSlot, // { startTime, endTime } t·ª´ available slots
      consultationType,
      notes,
      phoneNumber,
      appointmentFor
    } = appointmentData;

    // Validate required fields
    if (!patientUserId || !doctorUserId || !serviceId || !doctorScheduleId || !selectedSlot) {
      throw new Error('Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc ƒë·ªÉ ƒë·∫∑t l·ªãch t∆∞ v·∫•n');
    }

    if (!selectedSlot.startTime || !selectedSlot.endTime) {
      throw new Error('Th√¥ng tin khung gi·ªù kh√¥ng h·ª£p l·ªá');
    }

    // Ki·ªÉm tra patient c√≥ t·ªìn t·∫°i kh√¥ng v√† l·∫•y th√¥ng tin email
    const patient = await User.findById(patientUserId);
    if (!patient) {
      throw new Error('Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i');
    }

    // Ki·ªÉm tra service c√≥ t·ªìn t·∫°i kh√¥ng
    const service = await Service.findById(serviceId);
    if (!service) {
      throw new Error('D·ªãch v·ª• kh√¥ng t·ªìn t·∫°i');
    }

    if (service.status !== 'Active') {
      throw new Error('D·ªãch v·ª• n√†y hi·ªán kh√¥ng kh·∫£ d·ª•ng');
    }

    // Ki·ªÉm tra n·∫øu service y√™u c·∫ßu thanh to√°n tr∆∞·ªõc (Consultation)
    if (service.isPrepaid && service.category === 'Consultation') {
      // TODO: S·∫Ω implement logic thanh to√°n sau
      // Hi·ªán t·∫°i ch·ªâ log ƒë·ªÉ bi·∫øt service n√†y c·∫ßn thanh to√°n tr∆∞·ªõc
      console.log('‚ö†Ô∏è Service n√†y y√™u c·∫ßu thanh to√°n tr∆∞·ªõc:', service.serviceName);
      console.log('üí∞ Gi√°:', service.price, 'VND');
    }

    // X√°c ƒë·ªãnh mode d·ª±a v√†o category c·ªßa service
    let appointmentMode;
    if (service.category === 'Consultation') {
      appointmentMode = 'Online'; // T∆∞ v·∫•n online
    } else if (service.category === 'Examination') {
      appointmentMode = 'Offline'; // Kh√°m offline
    } else {
      appointmentMode = 'Online'; // M·∫∑c ƒë·ªãnh online
    }

    // X√°c ƒë·ªãnh customerId d·ª±a v√†o appointmentFor
    // appointmentFor: 'self' | 'other'
    let customerId = null;
    
    // Formdata l·∫•y t·ª´ request
    const formData = { phoneNumber, appointmentFor };
    if (formData?.appointmentFor === 'other') {
      // TODO: L·∫•y customerId t·ª´ request
      customerId = null; // T·∫°m th·ªùi null
    }

    if (formData.phoneNumber) {
      console.log('   - SƒêT:', formData.phoneNumber);
    }

    // ‚≠ê TH√äM: CHECK TIMESLOT TR∆Ø·ªöC KHI T·∫†O ‚ùå
    // ƒê·ªÉ tr√°nh race condition: 2 request c√πng l√∫c
    const existingTimeslot = await Timeslot.findOne({
      startTime: new Date(selectedSlot.startTime),
      endTime: new Date(selectedSlot.endTime),
      doctorUserId: doctorUserId,
      status: { $in: ['Reserved', 'Booked'] } // Ch·ªâ block n·∫øu ƒëang ƒë∆∞·ª£c gi·ªØ ho·∫∑c booked
    });

    if (existingTimeslot) {
      console.log('‚ùå Khung gi·ªù ƒë√£ b·ªã book/reserved:', existingTimeslot._id);
      throw new Error(`Khung gi·ªù n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ho·∫∑c ƒëang ch·ªù thanh to√°n. Vui l√≤ng ch·ªçn khung gi·ªù kh√°c.`);
    }

    // Validate selectedSlot duration ph·∫£i kh·ªõp v·ªõi service duration
    const slotStartTime = new Date(selectedSlot.startTime);
    const slotEndTime = new Date(selectedSlot.endTime);
    const slotDurationMinutes = (slotEndTime - slotStartTime) / 60000;

    if (slotDurationMinutes !== service.durationMinutes) {
      throw new Error(
        `Khung gi·ªù kh√¥ng h·ª£p l·ªá. D·ªãch v·ª• "${service.serviceName}" y√™u c·∫ßu ${service.durationMinutes} ph√∫t, ` +
        `nh∆∞ng slot ƒë∆∞·ª£c ch·ªçn ch·ªâ c√≥ ${slotDurationMinutes} ph√∫t`
      );
    }

    // Ki·ªÉm tra doctor schedule
    const schedule = await DoctorSchedule.findById(doctorScheduleId);
    if (!schedule) {
      throw new Error('L·ªãch l√†m vi·ªác c·ªßa b√°c sƒ© kh√¥ng t·ªìn t·∫°i');
    }

    // Ki·ªÉm tra doctor c√≥ t·ªìn t·∫°i kh√¥ng (t·ª´ b·∫£ng User v·ªõi role="Doctor")
    const doctor = await User.findById(doctorUserId);
    if (!doctor) {
      throw new Error('Kh√¥ng t√¨m th·∫•y b√°c sƒ©');
    }

    if (doctor.role !== 'Doctor') {
      throw new Error('User n√†y kh√¥ng ph·∫£i l√† b√°c sƒ©');
    }

    if (doctor.status !== 'Active') {
      throw new Error('B√°c sƒ© n√†y hi·ªán kh√¥ng ho·∫°t ƒë·ªông');
    }

    // Log th√¥ng tin ƒë·ªÉ ki·ªÉm tra
    console.log('üìã Th√¥ng tin ƒë·∫∑t l·ªãch:');
    console.log('- Service:', service.serviceName);
    console.log('- Category:', service.category);
    console.log('- isPrepaid:', service.isPrepaid);
    console.log('- Mode ƒë∆∞·ª£c set:', appointmentMode);
    console.log('- H·ªç t√™n t·ª´ form:', formData?.fullName);
    console.log('- SƒêT t·ª´ form:', formData?.phoneNumber);
    console.log('- Email t·ª´ user ƒëƒÉng nh·∫≠p:', patient.email);
    console.log('- ƒê·∫∑t cho:', formData?.appointmentFor || 'self');

    // N·∫øu ƒë·∫∑t cho ng∆∞·ªùi kh√°c, t·∫°o Customer
    if (formData?.appointmentFor === 'other') {
      if (!formData?.fullName || !formData?.email || !formData?.phoneNumber) {
        throw new Error('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n, email v√† s·ªë ƒëi·ªán tho·∫°i c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c ƒë·∫∑t l·ªãch (customer)');
      }

      // T·∫°o Customer m·ªõi
      const newCustomer = await Customer.create({
        patientUserId: patientUserId, 
        fullName: formData.fullName,
        email: formData.email, 
        phoneNumber: formData.phoneNumber,
        hasAccount: false,
        linkedUserId: null
      });

      customerId = newCustomer._id;
      console.log('‚úÖ ƒê√£ t·∫°o Customer cho ng∆∞·ªùi ƒë∆∞·ª£c ƒë·∫∑t l·ªãch:');
      console.log('   - Customer ID:', newCustomer._id);
      console.log('   - H·ªç t√™n:', formData.fullName);
      console.log('   - Email:', formData.email);
      console.log('   - SƒêT:', formData.phoneNumber);
    }

    // T·∫°o Timeslot m·ªõi t·ª´ slot ƒë∆∞·ª£c ch·ªçn
    const newTimeslot = await Timeslot.create({
      doctorScheduleId: schedule._id,
      doctorUserId,
      serviceId,
      startTime: new Date(selectedSlot.startTime),
      endTime: new Date(selectedSlot.endTime),
      breakAfterMinutes: 10,
      // ‚≠ê FIXED: N·∫øu d·ªãch v·ª• c·∫ßn thanh to√°n tr∆∞·ªõc, slot l√† "Reserved" (ch∆∞a x√°c nh·∫≠n)
      // Khi thanh to√°n xong m·ªõi th√†nh "Booked"
      status: service.isPrepaid ? 'Reserved' : 'Booked',
      appointmentId: null // S·∫Ω update sau khi t·∫°o appointment
    });

    console.log('‚úÖ ƒê√£ t·∫°o Timeslot:', newTimeslot._id);

    // X√°c ƒë·ªãnh type d·ª±a v√†o category
    let appointmentType;
    if (service.category === 'Consultation') {
      appointmentType = 'Consultation';
    } else if (service.category === 'Examination') {
      appointmentType = 'Examination';
    } else {
      appointmentType = 'Consultation'; // M·∫∑c ƒë·ªãnh
    }

    // X√°c ƒë·ªãnh status v√† expireAt d·ª±a v√†o isPrepaid
    let appointmentStatus = 'Pending';
    let paymentHoldExpiresAt = null;
    
    if (service.isPrepaid) {
      // N·∫øu c·∫ßn thanh to√°n tr∆∞·ªõc, set status PendingPayment v√† expire sau 15 ph√∫t
      appointmentStatus = 'PendingPayment';
      paymentHoldExpiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 ph√∫t
      console.log('üí≥ Appointment c·∫ßn thanh to√°n tr∆∞·ªõc, gi·ªØ slot ƒë·∫øn:', paymentHoldExpiresAt);
    }

    // T·∫°o appointment m·ªõi
    const newAppointment = await Appointment.create({
      patientUserId, // Ng∆∞·ªùi ƒë·∫∑t l·ªãch (booker)
      customerId, // null n·∫øu ƒë·∫∑t cho b·∫£n th√¢n, c√≥ gi√° tr·ªã n·∫øu ƒë·∫∑t cho ng∆∞·ªùi kh√°c
      doctorUserId,
      serviceId,
      timeslotId: newTimeslot._id,
      status: appointmentStatus, // 'PendingPayment' n·∫øu isPrepaid, 'Pending' n·∫øu kh√¥ng
      type: appointmentType, // D·ª±a v√†o service.category
      mode: appointmentMode, // Consultation=Online, Examination=Offline
      notes: notes || null,
      bookedByUserId: patientUserId,
      paymentHoldExpiresAt: paymentHoldExpiresAt
    });

    // Update timeslot v·ªõi appointmentId
    // ‚≠ê FIXED: Update status th√†nh "Reserved" n·∫øu c·∫ßn thanh to√°n
    await Timeslot.findByIdAndUpdate(newTimeslot._id, {
      appointmentId: newAppointment._id,
      status: service.isPrepaid ? 'Reserved' : 'Booked'
    });

    // N·∫øu c·∫ßn thanh to√°n tr∆∞·ªõc, t·∫°o Payment record v√† QR code
    let paymentRecord = null;
    let qrData = null;
    
    if (service.isPrepaid) {
      const paymentService = require('./payment.service');
      
      // X√°c ƒë·ªãnh t√™n kh√°ch h√†ng ƒë·ªÉ hi·ªÉn th·ªã tr√™n QR
      let customerName = patient.fullName; // M·∫∑c ƒë·ªãnh l√† ng∆∞·ªùi ƒë·∫∑t l·ªãch
      if (customerId) {
        // N·∫øu ƒë·∫∑t cho ng∆∞·ªùi kh√°c, d√πng t√™n customer
        const customer = await Customer.findById(customerId);
        if (customer) {
          customerName = customer.fullName;
        }
      }
      
      const paymentResult = await paymentService.createPayment({
        appointmentId: newAppointment._id,
        patientUserId: patientUserId,
        amount: service.price,
        holdExpiresAt: paymentHoldExpiresAt,
        customerName: customerName // T√™n s·∫Ω hi·ªÉn th·ªã tr√™n QR
      });

      paymentRecord = paymentResult.payment;
      qrData = paymentResult.qrData;

      // Update appointment v·ªõi paymentId
      await Appointment.findByIdAndUpdate(newAppointment._id, {
        paymentId: paymentRecord._id
      });

      console.log('‚úÖ ƒê√£ t·∫°o Payment record:', paymentRecord._id);
      console.log('üí∞ S·ªë ti·ªÅn c·∫ßn thanh to√°n:', service.price, 'VND');
      console.log('üì± QR Code:', qrData.qrUrl);
    }

    // Populate th√¥ng tin ƒë·∫ßy ƒë·ªß
    const populatedAppointment = await Appointment.findById(newAppointment._id)
      .populate('patientUserId', 'fullName email')
      .populate('doctorUserId', 'fullName email')
      .populate('serviceId', 'serviceName price durationMinutes category isPrepaid')
      .populate('timeslotId', 'startTime endTime')
      .populate('customerId', 'fullName email phoneNumber')
      .populate('paymentId');

    console.log('‚úÖ Appointment ƒë√£ t·∫°o v·ªõi mode:', populatedAppointment.mode);
    console.log('‚úÖ Status:', populatedAppointment.status);

    return populatedAppointment;
  }

  async reviewAppointment(appointmentId, staffUserId, action, cancelReason = null) {
    try {
      // Ki·ªÉm tra appointment t·ªìn t·∫°i
      const appointment = await Appointment.findById(appointmentId);
      if (!appointment) {
        throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn');
      }

      // Ki·ªÉm tra action h·ª£p l·ªá
      if (!['approve', 'cancel'].includes(action)) {
        throw new Error('Action ph·∫£i l√† "approve" ho·∫∑c "cancel"');
      }

      // Ki·ªÉm tra appointment status c√≥ th·ªÉ review kh√¥ng
      if (!['Pending', 'Approved'].includes(appointment.status)) {
        throw new Error(`Kh√¥ng th·ªÉ x·ª≠ l√Ω l·ªãch h·∫πn ·ªü tr·∫°ng th√°i ${appointment.status}`);
      }

      // N·∫øu l√† PendingPayment, kh√¥ng ƒë∆∞·ª£c ph√©p x·ª≠ l√Ω
      if (appointment.status === 'PendingPayment') {
        throw new Error('L·ªãch h·∫πn ƒëang ch·ªù thanh to√°n. Vui l√≤ng ch·ªù kh√°ch h√†ng thanh to√°n ho·∫∑c h·ªßy y√™u c·∫ßu n√†y.');
      }

      // L·∫•y ƒë·∫ßy ƒë·ªß th√¥ng tin
      const populatedAppointment = await Appointment.findById(appointmentId)
        .populate('patientUserId', 'fullName email')
        .populate('customerId', 'fullName email phoneNumber')
        .populate('doctorUserId', 'fullName email')
        .populate('serviceId', 'serviceName price durationMinutes category')
        .populate('timeslotId', 'startTime endTime');

      // X√°c ƒë·ªãnh ng∆∞·ªùi nh·∫≠n email
      let emailRecipient, recipientName;
      if (populatedAppointment.customerId) {
        emailRecipient = populatedAppointment.customerId.email;
        recipientName = populatedAppointment.customerId.fullName;
      } else {
        emailRecipient = populatedAppointment.patientUserId.email;
        recipientName = populatedAppointment.patientUserId.fullName;
      }

      // C√°c bi·∫øn d√πng chung
      let updatedAppointment;
      let emailData;
      const emailService = require('./email.service');

      // ========== APPROVE ACTION ==========
      if (action === 'approve') {
        console.log('‚úÖ Duy·ªát l·ªãch h·∫πn...');

        // ‚≠ê N·∫øu l√† Consultation (Online), t·∫°o Google Meet link
        let meetLink = null;
        if (populatedAppointment.mode === 'Online' && populatedAppointment.type === 'Consultation') {
          console.log('üìû T·∫°o Google Meet link cho t∆∞ v·∫•n online...');
          
          const googleMeetService = require('./googleMeetService');
          
          try {
            meetLink = await googleMeetService.generateMeetLink({
              appointmentId: appointmentId,
              doctorName: populatedAppointment.doctorUserId.fullName,
              patientName: recipientName,
              startTime: populatedAppointment.timeslotId.startTime,
              endTime: populatedAppointment.timeslotId.endTime,
              serviceName: populatedAppointment.serviceId.serviceName
            });
            console.log('‚úÖ Google Meet link ƒë√£ t·∫°o:', meetLink);
          } catch (meetError) {
            console.error('‚ùå L·ªói t·∫°o Google Meet link:', meetError.message);
            // V·∫´n ti·∫øp t·ª•c, fallback link ƒë∆∞·ª£c x·ª≠ l√Ω trong service
          }
        }

        // Update status sang Approved
        updatedAppointment = await Appointment.findByIdAndUpdate(
          appointmentId,
          {
            status: 'Approved',
            approvedByUserId: staffUserId,
            linkMeetUrl: meetLink
          },
          { new: true }
        )
          .populate('patientUserId', 'fullName email')
          .populate('customerId', 'fullName email phoneNumber')
          .populate('doctorUserId', 'fullName email')
          .populate('serviceId', 'serviceName price durationMinutes category')
          .populate('timeslotId', 'startTime endTime');

        console.log('‚úÖ Appointment updated:', updatedAppointment._id);

        // Prepare email
        emailData = {
          fullName: recipientName,
          serviceName: updatedAppointment.serviceId.serviceName,
          doctorName: updatedAppointment.doctorUserId.fullName,
          startTime: updatedAppointment.timeslotId.startTime,
          endTime: updatedAppointment.timeslotId.endTime,
          type: updatedAppointment.type,
          mode: updatedAppointment.mode,
          meetLink: updatedAppointment.linkMeetUrl
        };

        // ‚≠ê G·ª¨I EMAIL ASYNC (NON-BLOCKING) - Kh√¥ng ch·ªù xong m·ªõi tr·∫£ response
        (async () => {
          try {
            console.log('üìß B·∫Øt ƒë·∫ßu g·ª≠i email x√°c nh·∫≠n duy·ªát...');
            await emailService.sendAppointmentApprovedEmail(emailRecipient, emailData);
            console.log(`‚úÖ Email x√°c nh·∫≠n duy·ªát ƒë√£ g·ª≠i th√†nh c√¥ng ƒë·∫øn: ${emailRecipient}`);
          } catch (emailError) {
            console.error('‚ùå L·ªói g·ª≠i email x√°c nh·∫≠n duy·ªát:', emailError.message);
            console.error('üìß Email recipient:', emailRecipient);
            console.error('üìß Error details:', emailError);
          }
        })();

        // ‚≠ê TR·∫¢ RESPONSE NGAY (response kh√¥ng ch·ªù email)
        return {
          success: true,
          message: 'L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c duy·ªát. Email x√°c nh·∫≠n s·∫Ω ƒë∆∞·ª£c g·ª≠i trong v√†i gi√¢y',
          data: updatedAppointment
        };
      }

      // ========== CANCEL ACTION ==========
      if (action === 'cancel') {
        console.log('‚ùå H·ªßy l·ªãch h·∫πn...');

        // X√≥a timeslot
        if (populatedAppointment.timeslotId) {
          await Timeslot.findByIdAndUpdate(populatedAppointment.timeslotId._id, {
            status: 'Available',
            appointmentId: null
          });
          console.log('‚úÖ Timeslot ƒë√£ ƒë∆∞·ª£c release');
        }

        // Update status sang Cancelled
        updatedAppointment = await Appointment.findByIdAndUpdate(
          appointmentId,
          {
            status: 'Cancelled',
            approvedByUserId: staffUserId,
            cancelReason: cancelReason || 'L·ªãch h·∫πn ƒë√£ b·ªã h·ªßy',
            cancelledAt: new Date()
          },
          { new: true }
        )
          .populate('patientUserId', 'fullName email')
          .populate('customerId', 'fullName email phoneNumber')
          .populate('doctorUserId', 'fullName email')
          .populate('serviceId', 'serviceName price durationMinutes category')
          .populate('timeslotId', 'startTime endTime');

        console.log('‚úÖ Appointment cancelled:', updatedAppointment._id);

        // Prepare email
        emailData = {
          fullName: recipientName,
          serviceName: updatedAppointment.serviceId.serviceName,
          doctorName: updatedAppointment.doctorUserId.fullName,
          startTime: updatedAppointment.timeslotId.startTime,
          endTime: updatedAppointment.timeslotId.endTime,
          type: updatedAppointment.type,
          mode: updatedAppointment.mode,
          cancelReason: cancelReason || 'L·ªãch h·∫πn ƒë√£ b·ªã h·ªßy'
        };

        // ‚≠ê G·ª¨I EMAIL ASYNC (NON-BLOCKING) - Kh√¥ng ch·ªù xong m·ªõi tr·∫£ response
        (async () => {
          try {
            console.log('üìß B·∫Øt ƒë·∫ßu g·ª≠i email th√¥ng b√°o h·ªßy l·ªãch...');
            await emailService.sendAppointmentCancelledEmail(emailRecipient, emailData);
            console.log(`‚úÖ Email th√¥ng b√°o h·ªßy l·ªãch ƒë√£ g·ª≠i th√†nh c√¥ng ƒë·∫øn: ${emailRecipient}`);
          } catch (emailError) {
            console.error('‚ùå L·ªói g·ª≠i email th√¥ng b√°o h·ªßy:', emailError.message);
            console.error('üìß Email recipient:', emailRecipient);
            console.error('üìß Error details:', emailError);
          }
        })();

        // ‚≠ê TR·∫¢ RESPONSE NGAY (response kh√¥ng ch·ªù email)
        return {
          success: true,
          message: 'L·ªãch h·∫πn ƒë√£ b·ªã h·ªßy. Email th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c g·ª≠i trong v√†i gi√¢y',
          data: updatedAppointment
        };
      }

    } catch (error) {
      console.error('‚ùå L·ªói x·ª≠ l√Ω l·ªãch h·∫πn:', error);
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch l·ªãch h·∫πn ch·ªù duy·ªát (Pending)
   * D√πng cho staff review
   */
  async getPendingAppointments(filters = {}) {
    try {
      const query = {
        status: { $in: ['Pending', 'PendingPayment'] }
      };

      // C√≥ th·ªÉ filter theo doctor, ng√†y, v.v
      if (filters.doctorUserId) {
        query.doctorUserId = filters.doctorUserId;
      }

      if (filters.startDate && filters.endDate) {
        query.createdAt = {
          $gte: new Date(filters.startDate),
          $lte: new Date(filters.endDate)
        };
      }

      const appointments = await Appointment.find(query)
        .populate('patientUserId', 'fullName email phoneNumber')
        .populate('customerId', 'fullName email phoneNumber')
        .populate('doctorUserId', 'fullName email')
        .populate('serviceId', 'serviceName price durationMinutes category')
        .populate('timeslotId', 'startTime endTime')
        .sort({ createdAt: -1 });

      return {
        success: true,
        data: appointments,
        count: appointments.length
      };
    } catch (error) {
      console.error('‚ùå L·ªói l·∫•y danh s√°ch l·ªãch h·∫πn:', error);
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch t·∫•t c·∫£ appointments (c√≥ filter)
   */
  async getAllAppointments(filters = {}) {
    try {
      const query = {};

      if (filters.status) {
        query.status = filters.status;
      }

      if (filters.doctorUserId) {
        query.doctorUserId = filters.doctorUserId;
      }

      if (filters.patientUserId) {
        query.patientUserId = filters.patientUserId;
      }

      if (filters.mode) {
        query.mode = filters.mode;
      }

      if (filters.type) {
        query.type = filters.type;
      }

      const appointments = await Appointment.find(query)
        .populate('patientUserId', 'fullName email')
        .populate('customerId', 'fullName email')
        .populate('doctorUserId', 'fullName email')
        .populate('serviceId', 'serviceName price')
        .populate('timeslotId', 'startTime endTime')
        .sort({ createdAt: -1 });

      return {
        success: true,
        data: appointments,
        count: appointments.length
      };
    } catch (error) {
      console.error('‚ùå L·ªói l·∫•y danh s√°ch l·ªãch h·∫πn:', error);
      throw error;
    }
  }
}

module.exports = new AppointmentService();
