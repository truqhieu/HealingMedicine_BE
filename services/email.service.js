const { createTransporter, getVerificationEmailTemplate, getResetPasswordEmailTemplate, getAppointmentConfirmationEmailTemplate, getAppointmentApprovedEmailTemplate, getAppointmentCancelledEmailTemplate } = require('../config/emailConfig');

// Import SendGrid
const sgMail = require('@sendgrid/mail');

class EmailService {
  constructor() {
    // Initialize SendGrid n·∫øu c√≥ API key
    if (process.env.SENDGRID_API_KEY) {
      sgMail.setApiKey(process.env.SENDGRID_API_KEY);
      console.log('‚úÖ SendGrid initialized');
      this.useSendGrid = true;
    } else {
      console.warn('‚ö†Ô∏è SENDGRID_API_KEY not set, falling back to nodemailer');
      this.useSendGrid = false;
    }
  }

  createVerificationLink(token, email, baseUrl) {
    const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
    return `${frontendUrl}/verify-email?token=${token}&email=${email}`;
  }

  createResetPasswordLink(token, email, baseUrl) {
    const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
    return `${frontendUrl}/reset-password?token=${token}&email=${email}`;
  }

  async sendVerificationEmail(fullName, email, verificationLink) {
    if (this.useSendGrid) {
      const emailTemplate = getVerificationEmailTemplate(fullName, verificationLink);
      return this._sendViaSendGrid(
        email,
        emailTemplate.subject,
        emailTemplate.text,
        emailTemplate.html
      );
    }
    
    const transporter = createTransporter();
    const emailTemplate = getVerificationEmailTemplate(fullName, verificationLink);
    await transporter.sendMail({
      from: process.env.EMAIL_USER || 'noreply@healingmedicine.com',
      to: email,
      subject: emailTemplate.subject,
      text: emailTemplate.text,
      html: emailTemplate.html
    });
  }

  async resendVerificationEmail(fullName, email, verificationLink) {
    return this.sendVerificationEmail(fullName, email, verificationLink);
  }

  async sendResetPasswordEmail(fullName, email, resetLink) {
    // Lu√¥n g·ªçi template ƒë·ªÉ l·∫•y subject, text, html
    const emailTemplate = getResetPasswordEmailTemplate(fullName, resetLink);
    
    if (this.useSendGrid) {
      return this._sendViaSendGrid(
        email,
        emailTemplate.subject,
        emailTemplate.text,
        emailTemplate.html
      );
    }

    const transporter = createTransporter();
    await transporter.sendMail({
      from: process.env.EMAIL_USER || 'noreply@haianteeth.com',
      to: email,
      subject: emailTemplate.subject,
      text: emailTemplate.text,
      html: emailTemplate.html
    });
  }

  async sendAppointmentConfirmationEmail(email, appointmentData) {
    if (this.useSendGrid) {
      const emailTemplate = getAppointmentConfirmationEmailTemplate(appointmentData);
      return this._sendViaSendGrid(
        email,
        emailTemplate.subject,
        emailTemplate.text,
        emailTemplate.html
      );
    }

    const transporter = createTransporter();
    const emailTemplate = getAppointmentConfirmationEmailTemplate(appointmentData);
    await transporter.sendMail({
      from: process.env.EMAIL_USER || 'noreply@haianteeth.com',
      to: email,
      subject: emailTemplate.subject,
      text: emailTemplate.text,
      html: emailTemplate.html
    });
  }

  async sendAppointmentApprovedEmail(email, appointmentData) {
    if (this.useSendGrid) {
      const emailTemplate = getAppointmentApprovedEmailTemplate(appointmentData);
      return this._sendViaSendGrid(
        email,
        emailTemplate.subject,
        emailTemplate.text,
        emailTemplate.html
      );
    }

    const transporter = createTransporter();
    const emailTemplate = getAppointmentApprovedEmailTemplate(appointmentData);
    await transporter.sendMail({
      from: process.env.EMAIL_USER || 'noreply@haianteeth.com',
      to: email,
      subject: emailTemplate.subject,
      text: emailTemplate.text,
      html: emailTemplate.html
    });
  }

  async sendAppointmentCancelledEmail(email, appointmentData) {
    if (this.useSendGrid) {
      const emailTemplate = getAppointmentCancelledEmailTemplate(appointmentData);
      return this._sendViaSendGrid(
        email,
        emailTemplate.subject,
        emailTemplate.text,
        emailTemplate.html
      );
    }

    const transporter = createTransporter();
    const emailTemplate = getAppointmentCancelledEmailTemplate(appointmentData);
    await transporter.sendMail({
      from: process.env.EMAIL_USER || 'noreply@haianteeth.com',
      to: email,
      subject: emailTemplate.subject,
      text: emailTemplate.text,
      html: emailTemplate.html
    });
  }

  /**
   * ‚≠ê Helper: Send via SendGrid (HTTP API - kh√¥ng SMTP)
   */
  async _sendViaSendGrid(email, subject, text, html) {
    try {
      const msg = {
        to: email,
        from: process.env.SENDGRID_FROM_EMAIL || 'noreply@haianteeth.com',
        subject: subject,
        text: text,
        html: html
      };

      await sgMail.send(msg);
      console.log(`‚úÖ Email g·ª≠i qua SendGrid th√†nh c√¥ng ƒë·∫øn: ${email}`);
      return true;
    } catch (error) {
      console.error('‚ùå L·ªói SendGrid:', error.message);
      throw error;
    }
  }

  // Generic method ƒë·ªÉ g·ª≠i email v·ªõi template
  async sendEmail(emailData) {
    const { to, subject, template, data } = emailData;
    
    if (!to || !subject) {
      throw new Error('Email v√† subject l√† b·∫Øt bu·ªôc');
    }

    let html, text;
    
    // T·∫°o n·ªôi dung email d·ª±a tr√™n template
    if (template === 'requestApproved') {
      html = this._getRequestApprovedTemplate(data);
      text = this._getRequestApprovedTextTemplate(data);
    } else if (template === 'requestRejected') {
      html = this._getRequestRejectedTemplate(data);
      text = this._getRequestRejectedTextTemplate(data);
    } else {
      // Fallback cho c√°c template kh√°c
      html = `<p>${data.message || 'Th√¥ng b√°o t·ª´ h·ªá th·ªëng'}</p>`;
      text = data.message || 'Th√¥ng b√°o t·ª´ h·ªá th·ªëng';
    }

    if (this.useSendGrid) {
      return this._sendViaSendGrid(to, subject, text, html);
    } else {
      try {
        const transporter = createTransporter();
        await transporter.sendMail({
          from: process.env.EMAIL_USER || 'noreply@haianteeth.com',
          to: to,
          subject: subject,
          text: text,
          html: html
        });
        console.log(`‚úÖ Email g·ª≠i qua Nodemailer th√†nh c√¥ng ƒë·∫øn: ${to}`);
        return true;
      } catch (error) {
        console.error('‚ùå L·ªói g·ª≠i email qua Nodemailer:', error.message);
        // Fallback: ch·ªâ log ra console n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c email
        console.log('üìß EMAIL CONTENT (Fallback):');
        console.log('To:', to);
        console.log('Subject:', subject);
        console.log('Text:', text);
        console.log('HTML:', html);
        return false;
      }
    }
  }

  _getRequestApprovedTemplate(data) {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c duy·ªát</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #4CAF50; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .content { background: #f9f9f9; padding: 20px; border-radius: 0 0 8px 8px; }
          .success-icon { font-size: 48px; margin-bottom: 10px; }
          .info-box { background: white; padding: 15px; margin: 15px 0; border-radius: 5px; border-left: 4px solid #4CAF50; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="success-icon">‚úÖ</div>
            <h1>Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c duy·ªát</h1>
          </div>
          <div class="content">
            <p>Xin ch√†o <strong>${data.patientName}</strong>,</p>
            <p>Y√™u c·∫ßu <strong>${data.requestType}</strong> c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát th√†nh c√¥ng!</p>
            
            <div class="info-box">
              <h3>Th√¥ng tin chi ti·∫øt:</h3>
              <ul>
                <li><strong>Lo·∫°i y√™u c·∫ßu:</strong> ${data.requestType}</li>
                <li><strong>Th·ªùi gian duy·ªát:</strong> ${data.approvedAt}</li>
                <li><strong>Ng∆∞·ªùi duy·ªát:</strong> ${data.staffName}</li>
                <li><strong>M√£ l·ªãch h·∫πn:</strong> ${data.appointmentId}</li>
              </ul>
            </div>
            
            <p>L·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo y√™u c·∫ßu. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin trong t√†i kho·∫£n c·ªßa b·∫°n.</p>
            
            <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© H·∫£i Anh Teeth</p>
          </div>
        </div>
      </body>
      </html>
    `;
  }

  _getRequestApprovedTextTemplate(data) {
    return `
Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c duy·ªát

Xin ch√†o ${data.patientName},

Y√™u c·∫ßu ${data.requestType} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát th√†nh c√¥ng!

Th√¥ng tin chi ti·∫øt:
- Lo·∫°i y√™u c·∫ßu: ${data.requestType}
- Th·ªùi gian duy·ªát: ${data.approvedAt}
- Ng∆∞·ªùi duy·ªát: ${data.staffName}
- M√£ l·ªãch h·∫πn: ${data.appointmentId}

L·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo y√™u c·∫ßu. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin trong t√†i kho·∫£n c·ªßa b·∫°n.

Tr√¢n tr·ªçng,
ƒê·ªôi ng≈© H·∫£i Anh Teeth
    `;
  }

  _getRequestRejectedTemplate(data) {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>Y√™u c·∫ßu b·ªã t·ª´ ch·ªëi</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #f44336; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .content { background: #f9f9f9; padding: 20px; border-radius: 0 0 8px 8px; }
          .error-icon { font-size: 48px; margin-bottom: 10px; }
          .info-box { background: white; padding: 15px; margin: 15px 0; border-radius: 5px; border-left: 4px solid #f44336; }
          .reason-box { background: #fff3cd; padding: 15px; margin: 15px 0; border-radius: 5px; border: 1px solid #ffeaa7; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="error-icon">‚ùå</div>
            <h1>Y√™u c·∫ßu b·ªã t·ª´ ch·ªëi</h1>
          </div>
          <div class="content">
            <p>Xin ch√†o <strong>${data.patientName}</strong>,</p>
            <p>R·∫•t ti·∫øc, y√™u c·∫ßu <strong>${data.requestType}</strong> c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi.</p>
            
            <div class="info-box">
              <h3>Th√¥ng tin chi ti·∫øt:</h3>
              <ul>
                <li><strong>Lo·∫°i y√™u c·∫ßu:</strong> ${data.requestType}</li>
                <li><strong>Th·ªùi gian t·ª´ ch·ªëi:</strong> ${data.rejectedAt}</li>
                <li><strong>Ng∆∞·ªùi x·ª≠ l√Ω:</strong> ${data.staffName}</li>
                <li><strong>M√£ l·ªãch h·∫πn:</strong> ${data.appointmentId}</li>
              </ul>
            </div>
            
            <div class="reason-box">
              <h3>L√Ω do t·ª´ ch·ªëi:</h3>
              <p>${data.reason}</p>
            </div>
            
            <p>Vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i n·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc ho·∫∑c mu·ªën ƒë·∫∑t l·ªãch m·ªõi.</p>
            
            <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© H·∫£i Anh Teeth</p>
          </div>
        </div>
      </body>
      </html>
    `;
  }

  _getRequestRejectedTextTemplate(data) {
    return `
Y√™u c·∫ßu b·ªã t·ª´ ch·ªëi

Xin ch√†o ${data.patientName},

R·∫•t ti·∫øc, y√™u c·∫ßu ${data.requestType} c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi.

Th√¥ng tin chi ti·∫øt:
- Lo·∫°i y√™u c·∫ßu: ${data.requestType}
- Th·ªùi gian t·ª´ ch·ªëi: ${data.rejectedAt}
- Ng∆∞·ªùi x·ª≠ l√Ω: ${data.staffName}
- M√£ l·ªãch h·∫πn: ${data.appointmentId}

L√Ω do t·ª´ ch·ªëi:
${data.reason}

Vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i n·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc ho·∫∑c mu·ªën ƒë·∫∑t l·ªãch m·ªõi.

Tr√¢n tr·ªçng,
ƒê·ªôi ng≈© H·∫£i Anh Teeth
    `;
  }
}

module.exports = new EmailService();
