
class ScheduleHelper {

 
  static determineShift(datetime) {
    const hour = datetime.getHours();
    const minute = datetime.getMinutes();
    const timeInMinutes = hour * 60 + minute;
    
    // 8:00 = 480 ph√∫t, 13:00 = 780 ph√∫t
    if (timeInMinutes >= 480 && timeInMinutes < 780) {
      return 'Morning';
    } else if (timeInMinutes >= 780) {
      return 'Afternoon';
    }
    
    throw new Error('Th·ªùi gian kh√¥ng thu·ªôc ca l√†m vi·ªác');
  }


  static generateTimeslots(params) {
    const {
      doctorScheduleId,
      doctorUserId,
      serviceId,
      scheduleStartTime,
      scheduleEndTime,
      serviceDurationMinutes,
      breakAfterMinutes = 10
    } = params;

    // Validate input
    if (!scheduleStartTime || !scheduleEndTime) {
      throw new Error('Thi·∫øu th√¥ng tin th·ªùi gian l√†m vi·ªác');
    }

    if (!serviceDurationMinutes || serviceDurationMinutes <= 0) {
      throw new Error('Th·ªùi l∆∞·ª£ng d·ªãch v·ª• kh√¥ng h·ª£p l·ªá');
    }

    const timeslots = [];
    let currentStartTime = new Date(scheduleStartTime);
    const endTime = new Date(scheduleEndTime);

    console.log('üïê B·∫Øt ƒë·∫ßu t√≠nh to√°n timeslots:');
    console.log('   - Th·ªùi gian l√†m vi·ªác:', this.formatTimeSlot(currentStartTime, endTime));
    console.log('   - Th·ªùi l∆∞·ª£ng d·ªãch v·ª•:', serviceDurationMinutes, 'ph√∫t');
    console.log('   - Th·ªùi gian ngh·ªâ:', breakAfterMinutes, 'ph√∫t');

    let slotCount = 0;

    // T·∫°o timeslots cho ƒë·∫øn khi h·∫øt th·ªùi gian l√†m vi·ªác
    while (currentStartTime < endTime) {
      // T√≠nh th·ªùi gian k·∫øt th√∫c c·ªßa slot n√†y (start + duration)
      const currentEndTime = new Date(currentStartTime.getTime() + serviceDurationMinutes * 60000);

      // Ki·ªÉm tra xem slot n√†y c√≥ v∆∞·ª£t qu√° th·ªùi gian l√†m vi·ªác kh√¥ng
      if (currentEndTime > endTime) {
        console.log(`   ‚ö†Ô∏è Slot ${slotCount + 1} v∆∞·ª£t qu√° gi·ªù l√†m vi·ªác, d·ª´ng t·∫°i ƒë√¢y`);
        break;
      }

      // T·∫°o timeslot
      timeslots.push({
        doctorScheduleId,
        doctorUserId,
        serviceId,
        startTime: new Date(currentStartTime),
        endTime: new Date(currentEndTime),
        breakAfterMinutes,
        status: 'Available',
        appointmentId: null
      });

      slotCount++;
      console.log(`   ‚úÖ Slot ${slotCount}:`, this.formatTimeSlot(currentStartTime, currentEndTime));

      // T√≠nh th·ªùi gian b·∫Øt ƒë·∫ßu slot ti·∫øp theo (end + break)
      currentStartTime = new Date(currentEndTime.getTime() + breakAfterMinutes * 60000);
    }

    console.log(`   üìä T·ªïng c·ªông t·∫°o ƒë∆∞·ª£c ${slotCount} timeslots`);

    return timeslots;
  }

  static generateTimeslotsForMultipleServices(params) {
    const {
      doctorScheduleId,
      doctorUserId,
      scheduleStartTime,
      scheduleEndTime,
      services,
      breakAfterMinutes = 10
    } = params;

    const allTimeslots = [];

    services.forEach(service => {
      const timeslots = this.generateTimeslots({
        doctorScheduleId,
        doctorUserId,
        serviceId: service.serviceId,
        scheduleStartTime,
        scheduleEndTime,
        serviceDurationMinutes: service.durationMinutes,
        breakAfterMinutes
      });

      allTimeslots.push(...timeslots);
    });

    return allTimeslots;
  }

  /**
   * L·∫•y timeslots available cho m·ªôt service c·ª• th·ªÉ
   * @param {Array} allTimeslots - T·∫•t c·∫£ timeslots
   * @param {ObjectId} serviceId - ID d·ªãch v·ª• c·∫ßn l·ªçc
   * @returns {Array} - Timeslots c·ªßa service ƒë√≥
   */
  static filterTimeslotsByService(allTimeslots, serviceId) {
    return allTimeslots.filter(slot => 
      slot.serviceId.toString() === serviceId.toString() && 
      slot.status === 'Available'
    );
  }

  /**
   * Validate th·ªùi gian c√≥ trong ca l√†m vi·ªác kh√¥ng
   * @param {Date} datetime 
   * @returns {boolean}
   */
  static isValidWorkingTime(datetime) {
    try {
      this.determineShift(datetime);
      return true;
    } catch (error) {
      return false;
    }
  }

  /**
   * Format th·ªùi gian hi·ªÉn th·ªã theo gi·ªù Vi·ªát Nam
   * @param {Date} startTime 
   * @param {Date} endTime 
   * @returns {string} - "08:00 - 09:00"
   */
  static formatTimeSlot(startTime, endTime) {
    const formatTime = (date) => {
      // Format theo timezone Vi·ªát Nam (UTC+7)
      const options = {
        timeZone: 'Asia/Ho_Chi_Minh',
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
      };
      
      const formatted = new Date(date).toLocaleString('vi-VN', options);
      // formatted = "HH:mm" ho·∫∑c "H:mm"
      return formatted;
    };

    return `${formatTime(startTime)} - ${formatTime(endTime)}`;
  }

  /**
   * T√≠nh t·ªïng s·ªë slot c√≥ th·ªÉ t·∫°o trong m·ªôt kho·∫£ng th·ªùi gian
   * @param {Date} startTime 
   * @param {Date} endTime 
   * @param {Number} slotDurationMinutes - Th·ªùi l∆∞·ª£ng 1 slot
   * @param {Number} breakMinutes - Th·ªùi gian ngh·ªâ
   * @returns {Number}
   */
  static calculateMaxSlots(startTime, endTime, slotDurationMinutes, breakMinutes = 10) {
    const totalMinutes = (endTime - startTime) / 60000;
    const slotWithBreak = slotDurationMinutes + breakMinutes;
    return Math.floor(totalMinutes / slotWithBreak);
  }

  /**
   * Generate simple time slots (ch·ªâ startTime/endTime) cho m·ªôt kho·∫£ng th·ªùi gian
   * D√πng cho generateAvailableSlotsByDate
   */
  static generateTimeSlots(params) {
    const {
      scheduleStart,
      scheduleEnd,
      serviceDuration,
      breakAfterMinutes = 10
    } = params;

    // Validate input
    if (!scheduleStart || !scheduleEnd) {
      throw new Error('Thi·∫øu th√¥ng tin th·ªùi gian l√†m vi·ªác');
    }

    if (!serviceDuration || serviceDuration <= 0) {
      throw new Error('Th·ªùi l∆∞·ª£ng d·ªãch v·ª• kh√¥ng h·ª£p l·ªá');
    }

    const slots = [];
    let currentStartTime = new Date(scheduleStart);
    const endTime = new Date(scheduleEnd);

    // T·∫°o slots cho ƒë·∫øn khi h·∫øt th·ªùi gian l√†m vi·ªác
    while (currentStartTime < endTime) {
      // T√≠nh th·ªùi gian k·∫øt th√∫c c·ªßa slot n√†y (start + duration)
      const currentEndTime = new Date(currentStartTime.getTime() + serviceDuration * 60000);

      // Ki·ªÉm tra xem slot n√†y c√≥ v∆∞·ª£t qu√° th·ªùi gian l√†m vi·ªác kh√¥ng
      if (currentEndTime > endTime) {
        break;
      }

      // T·∫°o slot ƒë∆°n gi·∫£n (ch·ªâ c√≥ th·ªùi gian)
      slots.push({
        startTime: new Date(currentStartTime),
        endTime: new Date(currentEndTime)
      });

      // T√≠nh th·ªùi gian b·∫Øt ƒë·∫ßu slot ti·∫øp theo (end + break)
      currentStartTime = new Date(currentEndTime.getTime() + breakAfterMinutes * 60000);
    }

    return slots;
  }
}

module.exports = ScheduleHelper;
